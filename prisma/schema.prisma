// ------------------------------
// File: 00-datasource-and-generator.prisma
// ------------------------------
generator client {
  provider   = "prisma-client"
  engineType = "client"
  output     = "../src/app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// File: 10-common-enums.prisma
// ------------------------------

enum Role {
  TEACHER
  STUDENT
  PARENT
  GUARDIAN
  STAFF
  USER
  GUEST
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FeeType {
  TUITION
  REGISTRATION
  OTHER
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  WITHDRAWN
  SUSPENDED
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
  PRACTICAL
}

enum GradeScale {
  A_PLUS
  A
  B
  C
  D
  F
}

enum ConversationType {
  DIRECT
  GROUP
  COURSE
  COHORT
  INSTITUTE
  SYSTEM
}

// ------------------------------
// File: 20-institute.prisma
// ------------------------------

model Institute {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  logo      String?
  timezone  String?  @default("UTC")
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  departments  Department[]
  programs     Program[]
  courses      Course[]
  cohorts      Cohort[]
  assets       Asset[]
  settings     Setting?
  Fee          Fee[]
  Conversation Conversation[]
  Notification Notification[]
  Integration  Integration[]
}

model Setting {
  id          String   @id @default(uuid()) @db.Uuid
  instituteId String   @unique @db.Uuid
  key         String
  value       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  institute Institute @relation(fields: [instituteId], references: [id])
}

model Integration {
  id          String   @id @default(uuid()) @db.Uuid
  instituteId String   @db.Uuid
  provider    String
  config      Json
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  institute Institute @relation(fields: [instituteId], references: [id])

  @@index([instituteId, provider])
}

// ------------------------------
// File: 30-auth.prisma
// ------------------------------

model User {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique
  password   String
  username   String    @unique
  role       Role      @default(USER)
  profilePic String?
  coverPic   String?
  isBlocked  Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  // app relations
  submissions              Submission[]
  posts                    Post[]                    @relation("PostUser")
  comments                 Comment[]                 @relation("CommentUser")
  follows                  Follow[]                  @relation("UserFollowers")
  followings               Follow[]                  @relation("UserFollowings")
  apiKeys                  ApiKey[]
  auditLogs                AuditLog[]                @relation("AuditLogUser")
  Enrollment               Enrollment[]
  Notification             Notification[]            @relation("NotificationUser")
  Asset                    Asset[]
  sessions                 Session[]
  // chat relations
  createdConversations     Conversation[]            @relation("ConversationCreatedByUser")
  conversationParticipants ConversationParticipant[]
  messagesSent             Message[]                 @relation("MessageSender")
  readReceipts             MessageReadReceipt[]      @relation("MessageReadReceiptUser")
  parentChildren           ParentChild[]             @relation("ParentChildren")
  childParents             ParentChild[]             @relation("ChildParents")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  ip           String
  refreshToken String
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  expiresAt    DateTime @default(now())
}

model Admin {
  id         String    @id @default(uuid()) @db.Uuid
  firstName  String
  lastName   String?
  email      String    @unique
  password   String
  profilePic String?
  coverPic   String?
  isBlocked  Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  // relations created/managed by admin
  posts         Post[]         @relation("PostAdmin")
  comments      Comment[]      @relation("CommentAdmin")
  auditLogs     AuditLog[]     @relation("AuditLogAdmin")
  conversation  Conversation[] @relation("ConversationCreatedByAdmin")
  message       Message[]      @relation("MessageSenderAdmin")
  notifications Notification[] @relation("NotificationAdmin")
}

model ApiKey {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  name      String
  key       String    @unique
  expiresAt DateTime?
  revoked   Boolean   @default(false)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])

  @@index([followerId, followingId])
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String?  @db.Uuid
  adminId    String?  @db.Uuid
  action     String
  resource   String?
  resourceId String?
  meta       Json?
  ip         String?
  createdAt  DateTime @default(now())

  user  User?  @relation("AuditLogUser", fields: [userId], references: [id])
  admin Admin? @relation("AuditLogAdmin", fields: [adminId], references: [id])

  @@index([userId, resource, resourceId])
}

// ------------------------------
// File: 40-chat.prisma
// ------------------------------

model Conversation {
  id               String           @id @default(uuid()) @db.Uuid
  instituteId      String?          @db.Uuid
  type             ConversationType @default(DIRECT)
  title            String?
  isPrivate        Boolean          @default(true)
  createdByUserId  String?          @db.Uuid
  createdByAdminId String?          @db.Uuid
  metadata         Json?
  lastMessageId    String?
  lastMessageAt    DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  notification Notification[]

  institute      Institute?                @relation(fields: [instituteId], references: [id])
  createdByUser  User?                     @relation("ConversationCreatedByUser", fields: [createdByUserId], references: [id])
  createdByAdmin Admin?                    @relation("ConversationCreatedByAdmin", fields: [createdByAdminId], references: [id])
  participants   ConversationParticipant[]
  messages       Message[]

  @@index([instituteId])
  @@index([createdByUserId])
  @@index([createdByAdminId])
}

model ConversationParticipant {
  id             String    @id @default(uuid()) @db.Uuid
  conversationId String    @db.Uuid
  userId         String    @db.Uuid
  joinedAt       DateTime  @default(now())
  role           String? // e.g. MEMBER, MODERATOR
  mutedUntil     DateTime?
  canWrite       Boolean   @default(true)
  canViewHistory Boolean   @default(true)

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @db.Uuid
  senderUserId   String?  @db.Uuid
  senderAdminId  String?  @db.Uuid
  content        String?
  attachments    String[] // list of urls/keys
  system         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation         @relation(fields: [conversationId], references: [id])
  senderUser   User?                @relation("MessageSender", fields: [senderUserId], references: [id])
  senderAdmin  Admin?               @relation("MessageSenderAdmin", fields: [senderAdminId], references: [id])
  readReceipts MessageReadReceipt[] @relation("MessageReadReceiptMessage")

  @@index([conversationId, createdAt])
  @@index([senderUserId])
  @@index([senderAdminId])
}

model MessageReadReceipt {
  id        String   @id @default(uuid()) @db.Uuid
  messageId String   @db.Uuid
  userId    String   @db.Uuid
  readAt    DateTime @default(now())

  message Message @relation("MessageReadReceiptMessage", fields: [messageId], references: [id])
  user    User    @relation("MessageReadReceiptUser", fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
}

model ParentChild {
  id        String   @id @default(uuid()) @db.Uuid
  parentId  String   @db.Uuid
  childId   String   @db.Uuid
  relation  String? // e.g. father, mother, guardian
  createdAt DateTime @default(now())

  parent User @relation("ParentChildren", fields: [parentId], references: [id])
  child  User @relation("ChildParents", fields: [childId], references: [id])

  @@unique([parentId, childId])
  @@index([childId])
  @@index([parentId])
}

model Notification {
  id             String   @id @default(uuid())
  userId         String?  @db.Uuid
  adminId        String?  @db.Uuid
  instituteId    String?  @db.Uuid
  conversationId String?  @db.Uuid
  title          String
  body           String
  read           Boolean  @default(false)
  meta           Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  user         User?         @relation("NotificationUser", fields: [userId], references: [id])
  admin        Admin?        @relation("NotificationAdmin", fields: [adminId], references: [id])
  institute    Institute?    @relation(fields: [instituteId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([userId, instituteId])
}

// ------------------------------
// File: 50-content.prisma
// ------------------------------

model Post {
  id          String    @id @default(uuid()) @db.Uuid
  instituteId String?   @db.Uuid
  title       String
  content     String
  images      String[]
  likes       Int       @default(0)
  comments    Comment[]
  userId      String?   @db.Uuid // optional if admin creates it
  adminId     String?   @db.Uuid // optional if admin creates it
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User?      @relation("PostUser", fields: [userId], references: [id])
  admin     Admin?     @relation("PostAdmin", fields: [adminId], references: [id])
  institute Institute? @relation(fields: [instituteId], references: [id])

  @@index([instituteId])
  @@index([userId, createdAt])
}

model Comment {
  id           String   @id @default(uuid()) @db.Uuid
  content      String
  userId       String?  @db.Uuid // optional if admin
  adminId      String?  @db.Uuid // optional if admin
  assignmentId String?  @db.Uuid
  postId       String?  @db.Uuid
  instituteId  String?  @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User?       @relation("CommentUser", fields: [userId], references: [id])
  admin      Admin?      @relation("CommentAdmin", fields: [adminId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  post       Post?       @relation(fields: [postId], references: [id])
  institute  Institute?  @relation(fields: [instituteId], references: [id])

  @@index([postId])
  @@index([instituteId])
}

model Asset {
  id          String   @id @default(uuid()) @db.Uuid
  instituteId String?  @db.Uuid
  url         String
  key         String?
  mimeType    String?
  size        Int?
  createdById String?  @db.Uuid
  createdAt   DateTime @default(now())

  institute Institute? @relation(fields: [instituteId], references: [id])
  createdBy User?      @relation(fields: [createdById], references: [id])

  @@index([instituteId])
}

// ------------------------------
// File: 60-academics.prisma
// ------------------------------

model Department {
  id          String   @id @default(uuid()) @db.Uuid
  instituteId String   @db.Uuid
  name        String
  code        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  institute Institute @relation(fields: [instituteId], references: [id])
  programs  Program[]
  courses   Course[]

  @@unique([instituteId, name])
  @@index([instituteId])
}

model Program {
  id             String   @id @default(uuid()) @db.Uuid
  instituteId    String   @db.Uuid
  departmentId   String?  @db.Uuid
  name           String
  code           String?
  durationMonths Int?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  institute  Institute   @relation(fields: [instituteId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  courses    Course[]
  cohorts    Cohort[]

  @@unique([instituteId, name])
  @@index([instituteId])
}

model Course {
  id           String   @id @default(uuid()) @db.Uuid
  instituteId  String   @db.Uuid
  programId    String?  @db.Uuid
  departmentId String?  @db.Uuid
  code         String
  title        String
  description  String?
  creditHours  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  institute   Institute    @relation(fields: [instituteId], references: [id])
  program     Program?     @relation(fields: [programId], references: [id])
  department  Department?  @relation(fields: [departmentId], references: [id])
  subjects    Subject[]
  assignments Assignment[]
  exams       Exam[]

  @@unique([instituteId, code])
  @@index([instituteId])
}

model Subject {
  id          String   @id @default(uuid()) @db.Uuid
  courseId    String   @db.Uuid
  title       String
  code        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id])
  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(uuid()) @db.Uuid
  subjectId String   @db.Uuid
  title     String
  content   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id])
}

// ------------------------------
// File: 70-cohort-enrollment.prisma
// ------------------------------
model Cohort {
  id          String    @id @default(uuid()) @db.Uuid
  instituteId String    @db.Uuid
  programId   String?   @db.Uuid
  name        String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  institute   Institute    @relation(fields: [instituteId], references: [id])
  program     Program?     @relation(fields: [programId], references: [id])
  enrollments Enrollment[]
  classrooms  Classroom[]

  @@unique([instituteId, name])
  @@index([instituteId])
}

model Classroom {
  id        String   @id @default(uuid()) @db.Uuid
  cohortId  String?  @db.Uuid
  name      String
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cohort Cohort? @relation(fields: [cohortId], references: [id])
}

model Enrollment {
  id         String           @id @default(uuid()) @db.Uuid
  cohortId   String           @db.Uuid
  userId     String           @db.Uuid
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now())
  leftAt     DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())

  cohort     Cohort       @relation(fields: [cohortId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  Attendance Attendance[]
  ExamResult ExamResult[]
  Invoice    Invoice[]

  @@unique([cohortId, userId])
  @@index([userId])
}

model Attendance {
  id           String           @id @default(uuid()) @db.Uuid
  enrollmentId String           @db.Uuid
  date         DateTime
  status       AttendanceStatus @default(PRESENT)
  note         String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])

  @@index([enrollmentId, date])
}

// ------------------------------
// File: 80-assignments.prisma
// ------------------------------
model Assignment {
  id          String   @id @default(uuid()) @db.Uuid
  courseId    String   @db.Uuid
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
  evaluations Evaluation[]
  comments    Comment[]
  attachments Attachment[]
}

model Submission {
  id           String     @id @default(uuid()) @db.Uuid
  assignmentId String     @db.Uuid
  studentId    String     @db.Uuid
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Evaluation {
  id           String     @id @default(uuid()) @db.Uuid
  assignmentId String     @db.Uuid
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  studentId    String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Attachment {
  id           String @id @default(uuid()) @db.Uuid
  assignmentId String @db.Uuid
  url          String

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
}

// ------------------------------
// File: 90-exams.prisma
// ------------------------------
model Exam {
  id           String    @id @default(uuid()) @db.Uuid
  courseId     String    @db.Uuid
  title        String
  type         ExamType  @default(FINAL)
  maxMarks     Int
  passingMarks Int
  date         DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  course  Course       @relation(fields: [courseId], references: [id])
  results ExamResult[]

  @@index([courseId])
}

model ExamResult {
  id           String      @id @default(uuid()) @db.Uuid
  examId       String      @db.Uuid
  enrollmentId String      @db.Uuid
  marks        Float?
  grade        GradeScale?
  remarks      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())

  exam       Exam       @relation(fields: [examId], references: [id])
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])

  @@unique([examId, enrollmentId])
  @@index([enrollmentId])
}

// ------------------------------
// File: 100-finance.prisma
// ------------------------------
model Fee {
  id          String    @id @default(uuid()) @db.Uuid
  instituteId String    @db.Uuid
  title       String
  amount      Float
  type        FeeType
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  institute Institute @relation(fields: [instituteId], references: [id])
  invoices  Invoice[]

  @@index([instituteId])
}

model Invoice {
  id           String        @id @default(uuid()) @db.Uuid
  feeId        String        @db.Uuid
  enrollmentId String?       @db.Uuid
  invoiceNo    String        @unique
  amount       Float
  status       PaymentStatus @default(PENDING)
  issuedAt     DateTime      @default(now())
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  fee        Fee         @relation(fields: [feeId], references: [id])
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id])
  Payment    Payment[]

  @@index([enrollmentId])
}

model Payment {
  id          String        @id @default(uuid()) @db.Uuid
  invoiceId   String        @db.Uuid
  provider    String
  providerRef String?
  amount      Float
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

// ------------------------------
// File: 110-auxiliary.prisma
// ------------------------------
