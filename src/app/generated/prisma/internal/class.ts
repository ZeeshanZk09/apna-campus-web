
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "E:\\01. Front-end\\apna-campus-web\\src\\app\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "E:\\01. Front-end\\apna-campus-web\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ------------------------------\n// File: 00-datasource-and-generator.prisma\n// ------------------------------\ngenerator client {\n  provider   = \"prisma-client\"\n  engineType = \"client\"\n  output     = \"../src/app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ------------------------------\n// File: 10-common-enums.prisma\n// ------------------------------\n\nenum Role {\n  TEACHER\n  STUDENT\n  PARENT\n  GUARDIAN\n  STAFF\n  USER\n  GUEST\n}\n\nenum Gender {\n  MALE\n  FEMALE\n  UNKNOWN\n}\n\nenum AttendanceStatus {\n  PRESENT\n  ABSENT\n  LATE\n  EXCUSED\n}\n\nenum PaymentStatus {\n  PENDING\n  PAID\n  FAILED\n  REFUNDED\n}\n\nenum FeeType {\n  TUITION\n  REGISTRATION\n  OTHER\n}\n\nenum EnrollmentStatus {\n  ACTIVE\n  COMPLETED\n  WITHDRAWN\n  SUSPENDED\n}\n\nenum ExamType {\n  MIDTERM\n  FINAL\n  QUIZ\n  ASSIGNMENT\n  PRACTICAL\n}\n\nenum GradeScale {\n  A_PLUS\n  A_MINUS\n  B_PLUS\n  B_MINUS\n  C_PLUS\n  C_MINUS\n  D\n  F\n}\n\nenum ConversationType {\n  DIRECT\n  GROUP\n  COURSE\n  COHORT\n  INSTITUTE\n  SYSTEM\n}\n\n// ------------------------------\n// File: 20-institute.prisma\n// ------------------------------\n\nmodel Institute {\n  id        String   @id @default(uuid()) @db.Uuid\n  name      String\n  logo      String?\n  timezone  String?  @default(\"UTC\")\n  metadata  Json?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  posts        Post[]\n  comments     Comment[]\n  departments  Department[]\n  programs     Program[]\n  courses      Course[]\n  cohorts      Cohort[]\n  assets       Asset[]\n  settings     Setting?\n  Fee          Fee[]\n  Conversation Conversation[]\n  Notification Notification[]\n  Integration  Integration[]\n}\n\nmodel Setting {\n  id          String   @id @default(uuid()) @db.Uuid\n  instituteId String   @unique @db.Uuid\n  key         String\n  value       Json\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now())\n\n  institute Institute @relation(fields: [instituteId], references: [id])\n}\n\nmodel Integration {\n  id          String   @id @default(uuid()) @db.Uuid\n  instituteId String   @db.Uuid\n  provider    String\n  config      Json\n  enabled     Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now())\n\n  institute Institute @relation(fields: [instituteId], references: [id])\n\n  @@index([instituteId, provider])\n}\n\n// ------------------------------\n// File: 30-auth.prisma\n// ------------------------------\n\nmodel User {\n  id         String    @id @default(uuid()) @db.Uuid\n  email      String    @unique\n  password   String\n  username   String    @unique\n  role       Role      @default(USER)\n  Gender     Gender    @default(UNKNOWN)\n  profilePic String?\n  coverPic   String?\n  isBlocked  Boolean   @default(false)\n  isDeleted  Boolean   @default(false)\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime?\n\n  // app relations\n  submissions              Submission[]\n  posts                    Post[]                    @relation(\"PostUser\")\n  comments                 Comment[]                 @relation(\"CommentUser\")\n  follows                  Follow[]                  @relation(\"UserFollowers\")\n  followings               Follow[]                  @relation(\"UserFollowings\")\n  apiKeys                  ApiKey[]\n  auditLogs                AuditLog[]                @relation(\"AuditLogUser\")\n  Enrollment               Enrollment[]\n  Notification             Notification[]            @relation(\"NotificationUser\")\n  Asset                    Asset[]\n  sessions                 Session[]\n  // chat relations\n  createdConversations     Conversation[]            @relation(\"ConversationCreatedByUser\")\n  conversationParticipants ConversationParticipant[]\n  messagesSent             Message[]                 @relation(\"MessageSender\")\n  readReceipts             MessageReadReceipt[]      @relation(\"MessageReadReceiptUser\")\n  parentChildren           ParentChild[]             @relation(\"ParentChildren\")\n  childParents             ParentChild[]             @relation(\"ChildParents\")\n}\n\nmodel Session {\n  id           String   @id @default(uuid()) @db.Uuid\n  ip           String\n  refreshToken String\n  userId       String   @db.Uuid\n  user         User     @relation(fields: [userId], references: [id])\n  expiresAt    DateTime @default(now())\n}\n\nmodel Admin {\n  id         String    @id @default(uuid()) @db.Uuid\n  firstName  String\n  lastName   String?\n  email      String    @unique\n  password   String\n  profilePic String?\n  coverPic   String?\n  isBlocked  Boolean   @default(false)\n  isDeleted  Boolean   @default(false)\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime?\n\n  // relations created/managed by admin\n  posts         Post[]         @relation(\"PostAdmin\")\n  comments      Comment[]      @relation(\"CommentAdmin\")\n  auditLogs     AuditLog[]     @relation(\"AuditLogAdmin\")\n  conversation  Conversation[] @relation(\"ConversationCreatedByAdmin\")\n  message       Message[]      @relation(\"MessageSenderAdmin\")\n  notifications Notification[] @relation(\"NotificationAdmin\")\n}\n\nmodel ApiKey {\n  id        String    @id @default(uuid()) @db.Uuid\n  userId    String    @db.Uuid\n  name      String\n  key       String    @unique\n  expiresAt DateTime?\n  revoked   Boolean   @default(false)\n  createdAt DateTime  @default(now())\n\n  user User @relation(fields: [userId], references: [id])\n}\n\nmodel Follow {\n  id          String   @id @default(uuid()) @db.Uuid\n  followerId  String   @db.Uuid\n  followingId String   @db.Uuid\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  follower  User @relation(\"UserFollowers\", fields: [followerId], references: [id])\n  following User @relation(\"UserFollowings\", fields: [followingId], references: [id])\n\n  @@index([followerId, followingId])\n}\n\nmodel AuditLog {\n  id         String   @id @default(uuid()) @db.Uuid\n  userId     String?  @db.Uuid\n  adminId    String?  @db.Uuid\n  action     String\n  resource   String?\n  resourceId String?\n  meta       Json?\n  ip         String?\n  createdAt  DateTime @default(now())\n\n  user  User?  @relation(\"AuditLogUser\", fields: [userId], references: [id])\n  admin Admin? @relation(\"AuditLogAdmin\", fields: [adminId], references: [id])\n\n  @@index([userId, resource, resourceId])\n}\n\n// ------------------------------\n// File: 40-chat.prisma\n// ------------------------------\n\nmodel Conversation {\n  id               String           @id @default(uuid()) @db.Uuid\n  instituteId      String?          @db.Uuid\n  type             ConversationType @default(DIRECT)\n  title            String?\n  isPrivate        Boolean          @default(true)\n  createdByUserId  String?          @db.Uuid\n  createdByAdminId String?          @db.Uuid\n  metadata         Json?\n  lastMessageId    String?\n  lastMessageAt    DateTime?\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n\n  notification Notification[]\n\n  institute      Institute?                @relation(fields: [instituteId], references: [id])\n  createdByUser  User?                     @relation(\"ConversationCreatedByUser\", fields: [createdByUserId], references: [id])\n  createdByAdmin Admin?                    @relation(\"ConversationCreatedByAdmin\", fields: [createdByAdminId], references: [id])\n  participants   ConversationParticipant[]\n  messages       Message[]\n\n  @@index([instituteId])\n  @@index([createdByUserId])\n  @@index([createdByAdminId])\n}\n\nmodel ConversationParticipant {\n  id             String    @id @default(uuid()) @db.Uuid\n  conversationId String    @db.Uuid\n  userId         String    @db.Uuid\n  joinedAt       DateTime  @default(now())\n  role           String? // e.g. MEMBER, MODERATOR\n  mutedUntil     DateTime?\n  canWrite       Boolean   @default(true)\n  canViewHistory Boolean   @default(true)\n\n  conversation Conversation @relation(fields: [conversationId], references: [id])\n  user         User         @relation(fields: [userId], references: [id])\n\n  @@unique([conversationId, userId])\n  @@index([userId])\n  @@index([conversationId])\n}\n\nmodel Message {\n  id             String   @id @default(uuid()) @db.Uuid\n  conversationId String   @db.Uuid\n  senderUserId   String?  @db.Uuid\n  senderAdminId  String?  @db.Uuid\n  content        String?\n  attachments    String[] // list of urls/keys\n  system         Boolean  @default(false)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  conversation Conversation         @relation(fields: [conversationId], references: [id])\n  senderUser   User?                @relation(\"MessageSender\", fields: [senderUserId], references: [id])\n  senderAdmin  Admin?               @relation(\"MessageSenderAdmin\", fields: [senderAdminId], references: [id])\n  readReceipts MessageReadReceipt[] @relation(\"MessageReadReceiptMessage\")\n\n  @@index([conversationId, createdAt])\n  @@index([senderUserId])\n  @@index([senderAdminId])\n}\n\nmodel MessageReadReceipt {\n  id        String   @id @default(uuid()) @db.Uuid\n  messageId String   @db.Uuid\n  userId    String   @db.Uuid\n  readAt    DateTime @default(now())\n\n  message Message @relation(\"MessageReadReceiptMessage\", fields: [messageId], references: [id])\n  user    User    @relation(\"MessageReadReceiptUser\", fields: [userId], references: [id])\n\n  @@unique([messageId, userId])\n  @@index([userId])\n  @@index([messageId])\n}\n\nmodel ParentChild {\n  id        String   @id @default(uuid()) @db.Uuid\n  parentId  String   @db.Uuid\n  childId   String   @db.Uuid\n  relation  String? // e.g. father, mother, guardian\n  createdAt DateTime @default(now())\n\n  parent User @relation(\"ParentChildren\", fields: [parentId], references: [id])\n  child  User @relation(\"ChildParents\", fields: [childId], references: [id])\n\n  @@unique([parentId, childId])\n  @@index([childId])\n  @@index([parentId])\n}\n\nmodel Notification {\n  id             String   @id @default(uuid())\n  userId         String?  @db.Uuid\n  adminId        String?  @db.Uuid\n  instituteId    String?  @db.Uuid\n  conversationId String?  @db.Uuid\n  title          String\n  body           String\n  read           Boolean  @default(false)\n  meta           Json?\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @default(now())\n\n  user         User?         @relation(\"NotificationUser\", fields: [userId], references: [id])\n  admin        Admin?        @relation(\"NotificationAdmin\", fields: [adminId], references: [id])\n  institute    Institute?    @relation(fields: [instituteId], references: [id])\n  conversation Conversation? @relation(fields: [conversationId], references: [id])\n\n  @@index([userId, instituteId])\n}\n\n// ------------------------------\n// File: 50-content.prisma\n// ------------------------------\n\nmodel Post {\n  id          String    @id @default(uuid()) @db.Uuid\n  instituteId String?   @db.Uuid\n  title       String\n  content     String\n  images      String[]\n  likes       Int       @default(0)\n  comments    Comment[]\n  userId      String?   @db.Uuid // optional if admin creates it\n  adminId     String?   @db.Uuid // optional if admin creates it\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  user      User?      @relation(\"PostUser\", fields: [userId], references: [id])\n  admin     Admin?     @relation(\"PostAdmin\", fields: [adminId], references: [id])\n  institute Institute? @relation(fields: [instituteId], references: [id])\n\n  @@index([instituteId])\n  @@index([userId, createdAt])\n}\n\nmodel Comment {\n  id           String   @id @default(uuid()) @db.Uuid\n  content      String\n  userId       String?  @db.Uuid // optional if admin\n  adminId      String?  @db.Uuid // optional if admin\n  assignmentId String?  @db.Uuid\n  postId       String?  @db.Uuid\n  instituteId  String?  @db.Uuid\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  user       User?       @relation(\"CommentUser\", fields: [userId], references: [id])\n  admin      Admin?      @relation(\"CommentAdmin\", fields: [adminId], references: [id])\n  assignment Assignment? @relation(fields: [assignmentId], references: [id])\n  post       Post?       @relation(fields: [postId], references: [id])\n  institute  Institute?  @relation(fields: [instituteId], references: [id])\n\n  @@index([postId])\n  @@index([instituteId])\n}\n\nmodel Asset {\n  id          String   @id @default(uuid()) @db.Uuid\n  instituteId String?  @db.Uuid\n  url         String\n  key         String?\n  mimeType    String?\n  size        Int?\n  createdById String?  @db.Uuid\n  createdAt   DateTime @default(now())\n\n  institute Institute? @relation(fields: [instituteId], references: [id])\n  createdBy User?      @relation(fields: [createdById], references: [id])\n\n  @@index([instituteId])\n}\n\n// ------------------------------\n// File: 60-academics.prisma\n// ------------------------------\n\nmodel Department {\n  id          String   @id @default(uuid()) @db.Uuid\n  instituteId String   @db.Uuid\n  name        String\n  code        String?\n  description String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  institute Institute @relation(fields: [instituteId], references: [id])\n  programs  Program[]\n  courses   Course[]\n\n  @@unique([instituteId, name])\n  @@index([instituteId])\n}\n\nmodel Program {\n  id             String   @id @default(uuid()) @db.Uuid\n  instituteId    String   @db.Uuid\n  departmentId   String?  @db.Uuid\n  name           String\n  code           String?\n  durationMonths Int?\n  description    String?\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  institute  Institute   @relation(fields: [instituteId], references: [id])\n  department Department? @relation(fields: [departmentId], references: [id])\n  courses    Course[]\n  cohorts    Cohort[]\n\n  @@unique([instituteId, name])\n  @@index([instituteId])\n}\n\nmodel Course {\n  id           String   @id @default(uuid()) @db.Uuid\n  instituteId  String   @db.Uuid\n  programId    String?  @db.Uuid\n  departmentId String?  @db.Uuid\n  code         String\n  title        String\n  description  String?\n  creditHours  Int?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  institute   Institute    @relation(fields: [instituteId], references: [id])\n  program     Program?     @relation(fields: [programId], references: [id])\n  department  Department?  @relation(fields: [departmentId], references: [id])\n  subjects    Subject[]\n  assignments Assignment[]\n  exams       Exam[]\n\n  @@unique([instituteId, code])\n  @@index([instituteId])\n}\n\nmodel Subject {\n  id          String   @id @default(uuid()) @db.Uuid\n  courseId    String   @db.Uuid\n  title       String\n  code        String?\n  description String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  course  Course   @relation(fields: [courseId], references: [id])\n  lessons Lesson[]\n}\n\nmodel Lesson {\n  id        String   @id @default(uuid()) @db.Uuid\n  subjectId String   @db.Uuid\n  title     String\n  content   String?\n  order     Int      @default(0)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  subject Subject @relation(fields: [subjectId], references: [id])\n}\n\n// ------------------------------\n// File: 70-cohort-enrollment.prisma\n// ------------------------------\nmodel Cohort {\n  id          String    @id @default(uuid()) @db.Uuid\n  instituteId String    @db.Uuid\n  programId   String?   @db.Uuid\n  name        String\n  startDate   DateTime\n  endDate     DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  institute   Institute    @relation(fields: [instituteId], references: [id])\n  program     Program?     @relation(fields: [programId], references: [id])\n  enrollments Enrollment[]\n  classrooms  Classroom[]\n\n  @@unique([instituteId, name])\n  @@index([instituteId])\n}\n\nmodel Classroom {\n  id        String   @id @default(uuid()) @db.Uuid\n  cohortId  String?  @db.Uuid\n  name      String\n  capacity  Int?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  cohort Cohort? @relation(fields: [cohortId], references: [id])\n}\n\nmodel Enrollment {\n  id         String           @id @default(uuid()) @db.Uuid\n  cohortId   String           @db.Uuid\n  userId     String           @db.Uuid\n  status     EnrollmentStatus @default(ACTIVE)\n  enrolledAt DateTime         @default(now())\n  leftAt     DateTime?\n  createdAt  DateTime         @default(now())\n  updatedAt  DateTime         @default(now())\n\n  cohort     Cohort       @relation(fields: [cohortId], references: [id])\n  user       User         @relation(fields: [userId], references: [id])\n  Attendance Attendance[]\n  ExamResult ExamResult[]\n  Invoice    Invoice[]\n\n  @@unique([cohortId, userId])\n  @@index([userId])\n}\n\nmodel Attendance {\n  id           String           @id @default(uuid()) @db.Uuid\n  enrollmentId String           @db.Uuid\n  date         DateTime\n  status       AttendanceStatus @default(PRESENT)\n  note         String?\n  createdAt    DateTime         @default(now())\n  updatedAt    DateTime         @default(now())\n\n  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])\n\n  @@index([enrollmentId, date])\n}\n\n// ------------------------------\n// File: 80-assignments.prisma\n// ------------------------------\nmodel Assignment {\n  id          String   @id @default(uuid()) @db.Uuid\n  courseId    String   @db.Uuid\n  title       String\n  description String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  course      Course       @relation(fields: [courseId], references: [id])\n  submissions Submission[]\n  evaluations Evaluation[]\n  comments    Comment[]\n  attachments Attachment[]\n}\n\nmodel Submission {\n  id           String     @id @default(uuid()) @db.Uuid\n  assignmentId String     @db.Uuid\n  studentId    String     @db.Uuid\n  assignment   Assignment @relation(fields: [assignmentId], references: [id])\n  student      User       @relation(fields: [studentId], references: [id])\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n}\n\nmodel Evaluation {\n  id           String     @id @default(uuid()) @db.Uuid\n  assignmentId String     @db.Uuid\n  assignment   Assignment @relation(fields: [assignmentId], references: [id])\n  studentId    String     @db.Uuid\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n}\n\nmodel Attachment {\n  id           String @id @default(uuid()) @db.Uuid\n  assignmentId String @db.Uuid\n  url          String\n\n  assignment Assignment @relation(fields: [assignmentId], references: [id])\n  createdAt  DateTime   @default(now())\n  updatedAt  DateTime   @default(now())\n}\n\n// ------------------------------\n// File: 90-exams.prisma\n// ------------------------------\nmodel Exam {\n  id           String    @id @default(uuid()) @db.Uuid\n  courseId     String    @db.Uuid\n  title        String\n  type         ExamType  @default(FINAL)\n  maxMarks     Int\n  passingMarks Int\n  date         DateTime?\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @default(now())\n\n  course  Course       @relation(fields: [courseId], references: [id])\n  results ExamResult[]\n\n  @@index([courseId])\n}\n\nmodel ExamResult {\n  id           String      @id @default(uuid()) @db.Uuid\n  examId       String      @db.Uuid\n  enrollmentId String      @db.Uuid\n  marks        Float?\n  grade        GradeScale?\n  remarks      String?\n  createdAt    DateTime    @default(now())\n  updatedAt    DateTime    @default(now())\n\n  exam       Exam       @relation(fields: [examId], references: [id])\n  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])\n\n  @@unique([examId, enrollmentId])\n  @@index([enrollmentId])\n}\n\n// ------------------------------\n// File: 100-finance.prisma\n// ------------------------------\nmodel Fee {\n  id          String    @id @default(uuid()) @db.Uuid\n  instituteId String    @db.Uuid\n  title       String\n  amount      Float\n  type        FeeType\n  dueDate     DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @default(now())\n\n  institute Institute @relation(fields: [instituteId], references: [id])\n  invoices  Invoice[]\n\n  @@index([instituteId])\n}\n\nmodel Invoice {\n  id           String        @id @default(uuid()) @db.Uuid\n  feeId        String        @db.Uuid\n  enrollmentId String?       @db.Uuid\n  invoiceNo    String        @unique\n  amount       Float\n  status       PaymentStatus @default(PENDING)\n  issuedAt     DateTime      @default(now())\n  paidAt       DateTime?\n  createdAt    DateTime      @default(now())\n  updatedAt    DateTime      @default(now())\n\n  fee        Fee         @relation(fields: [feeId], references: [id])\n  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id])\n  Payment    Payment[]\n\n  @@index([enrollmentId])\n}\n\nmodel Payment {\n  id          String        @id @default(uuid()) @db.Uuid\n  invoiceId   String        @db.Uuid\n  provider    String\n  providerRef String?\n  amount      Float\n  status      PaymentStatus @default(PENDING)\n  paidAt      DateTime?\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @default(now())\n\n  invoice Invoice @relation(fields: [invoiceId], references: [id])\n\n  @@index([invoiceId])\n}\n\n// ------------------------------\n// File: 110-auxiliary.prisma\n// ------------------------------\n",
  "inlineSchemaHash": "cd53f37f1b7331e3ee1c9210cbc2f4694863adbb64d5b6939d46cb4728e2d52c",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Institute\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"InstituteToPost\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToInstitute\"},{\"name\":\"departments\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToInstitute\"},{\"name\":\"programs\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"InstituteToProgram\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToInstitute\"},{\"name\":\"cohorts\",\"kind\":\"object\",\"type\":\"Cohort\",\"relationName\":\"CohortToInstitute\"},{\"name\":\"assets\",\"kind\":\"object\",\"type\":\"Asset\",\"relationName\":\"AssetToInstitute\"},{\"name\":\"settings\",\"kind\":\"object\",\"type\":\"Setting\",\"relationName\":\"InstituteToSetting\"},{\"name\":\"Fee\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToInstitute\"},{\"name\":\"Conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToInstitute\"},{\"name\":\"Notification\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"InstituteToNotification\"},{\"name\":\"Integration\",\"kind\":\"object\",\"type\":\"Integration\",\"relationName\":\"InstituteToIntegration\"}],\"dbName\":null},\"Setting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"InstituteToSetting\"}],\"dbName\":null},\"Integration\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"InstituteToIntegration\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"Gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"profilePic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverPic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isBlocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentUser\"},{\"name\":\"follows\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollowers\"},{\"name\":\"followings\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"UserFollowings\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"ApiKey\",\"relationName\":\"ApiKeyToUser\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"AuditLogUser\"},{\"name\":\"Enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"Notification\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationUser\"},{\"name\":\"Asset\",\"kind\":\"object\",\"type\":\"Asset\",\"relationName\":\"AssetToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"createdConversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationCreatedByUser\"},{\"name\":\"conversationParticipants\",\"kind\":\"object\",\"type\":\"ConversationParticipant\",\"relationName\":\"ConversationParticipantToUser\"},{\"name\":\"messagesSent\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageSender\"},{\"name\":\"readReceipts\",\"kind\":\"object\",\"type\":\"MessageReadReceipt\",\"relationName\":\"MessageReadReceiptUser\"},{\"name\":\"parentChildren\",\"kind\":\"object\",\"type\":\"ParentChild\",\"relationName\":\"ParentChildren\"},{\"name\":\"childParents\",\"kind\":\"object\",\"type\":\"ParentChild\",\"relationName\":\"ChildParents\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ip\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Admin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverPic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isBlocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostAdmin\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentAdmin\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"AuditLogAdmin\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationCreatedByAdmin\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageSenderAdmin\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationAdmin\"}],\"dbName\":null},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"revoked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ApiKeyToUser\"}],\"dbName\":null},\"Follow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"follower\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollowers\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserFollowings\"}],\"dbName\":null},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resource\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ip\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuditLogUser\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"AuditLogAdmin\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ConversationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPrivate\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdByUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdByAdminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"lastMessageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastMessageAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notification\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"ConversationToNotification\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"ConversationToInstitute\"},{\"name\":\"createdByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationCreatedByUser\"},{\"name\":\"createdByAdmin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"ConversationCreatedByAdmin\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"ConversationParticipant\",\"relationName\":\"ConversationToConversationParticipant\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":null},\"ConversationParticipant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mutedUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"canWrite\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"canViewHistory\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToConversationParticipant\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationParticipantToUser\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderAdminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"system\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"senderUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageSender\"},{\"name\":\"senderAdmin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"MessageSenderAdmin\"},{\"name\":\"readReceipts\",\"kind\":\"object\",\"type\":\"MessageReadReceipt\",\"relationName\":\"MessageReadReceiptMessage\"}],\"dbName\":null},\"MessageReadReceipt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageReadReceiptMessage\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageReadReceiptUser\"}],\"dbName\":null},\"ParentChild\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"childId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ParentChildren\"},{\"name\":\"child\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChildParents\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationUser\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"NotificationAdmin\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"InstituteToNotification\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToNotification\"}],\"dbName\":null},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"likes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToPost\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostUser\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"PostAdmin\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"InstituteToPost\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentUser\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"CommentAdmin\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToComment\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"CommentToPost\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"CommentToInstitute\"}],\"dbName\":null},\"Asset\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mimeType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"AssetToInstitute\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AssetToUser\"}],\"dbName\":null},\"Department\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"DepartmentToInstitute\"},{\"name\":\"programs\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"DepartmentToProgram\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToDepartment\"}],\"dbName\":null},\"Program\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"durationMonths\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"InstituteToProgram\"},{\"name\":\"department\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToProgram\"},{\"name\":\"courses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToProgram\"},{\"name\":\"cohorts\",\"kind\":\"object\",\"type\":\"Cohort\",\"relationName\":\"CohortToProgram\"}],\"dbName\":null},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creditHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"CourseToInstitute\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"CourseToProgram\"},{\"name\":\"department\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"CourseToDepartment\"},{\"name\":\"subjects\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"CourseToSubject\"},{\"name\":\"assignments\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToCourse\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"CourseToExam\"}],\"dbName\":null},\"Subject\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToSubject\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToSubject\"}],\"dbName\":null},\"Lesson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"LessonToSubject\"}],\"dbName\":null},\"Cohort\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"CohortToInstitute\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"CohortToProgram\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CohortToEnrollment\"},{\"name\":\"classrooms\",\"kind\":\"object\",\"type\":\"Classroom\",\"relationName\":\"ClassroomToCohort\"}],\"dbName\":null},\"Classroom\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cohortId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cohort\",\"kind\":\"object\",\"type\":\"Cohort\",\"relationName\":\"ClassroomToCohort\"}],\"dbName\":null},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cohortId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EnrollmentStatus\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"leftAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cohort\",\"kind\":\"object\",\"type\":\"Cohort\",\"relationName\":\"CohortToEnrollment\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"Attendance\",\"kind\":\"object\",\"type\":\"Attendance\",\"relationName\":\"AttendanceToEnrollment\"},{\"name\":\"ExamResult\",\"kind\":\"object\",\"type\":\"ExamResult\",\"relationName\":\"EnrollmentToExamResult\"},{\"name\":\"Invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"EnrollmentToInvoice\"}],\"dbName\":null},\"Attendance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AttendanceStatus\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"AttendanceToEnrollment\"}],\"dbName\":null},\"Assignment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"AssignmentToCourse\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"AssignmentToSubmission\"},{\"name\":\"evaluations\",\"kind\":\"object\",\"type\":\"Evaluation\",\"relationName\":\"AssignmentToEvaluation\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"AssignmentToComment\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AssignmentToAttachment\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToSubmission\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Evaluation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToEvaluation\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Attachment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignment\",\"kind\":\"object\",\"type\":\"Assignment\",\"relationName\":\"AssignmentToAttachment\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Exam\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ExamType\"},{\"name\":\"maxMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"passingMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToExam\"},{\"name\":\"results\",\"kind\":\"object\",\"type\":\"ExamResult\",\"relationName\":\"ExamToExamResult\"}],\"dbName\":null},\"ExamResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"marks\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"grade\",\"kind\":\"enum\",\"type\":\"GradeScale\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToExamResult\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToExamResult\"}],\"dbName\":null},\"Fee\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instituteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"FeeType\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"institute\",\"kind\":\"object\",\"type\":\"Institute\",\"relationName\":\"FeeToInstitute\"},{\"name\":\"invoices\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"FeeToInvoice\"}],\"dbName\":null},\"Invoice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"feeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invoiceNo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"issuedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"fee\",\"kind\":\"object\",\"type\":\"Fee\",\"relationName\":\"FeeToInvoice\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToInvoice\"},{\"name\":\"Payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"InvoiceToPayment\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerRef\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToPayment\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Institutes
   * const institutes = await prisma.institute.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Institutes
 * const institutes = await prisma.institute.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.institute`: Exposes CRUD operations for the **Institute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institutes
    * const institutes = await prisma.institute.findMany()
    * ```
    */
  get institute(): Prisma.InstituteDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integration.findMany()
    * ```
    */
  get integration(): Prisma.IntegrationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.conversationParticipant`: Exposes CRUD operations for the **ConversationParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationParticipants
    * const conversationParticipants = await prisma.conversationParticipant.findMany()
    * ```
    */
  get conversationParticipant(): Prisma.ConversationParticipantDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.messageReadReceipt`: Exposes CRUD operations for the **MessageReadReceipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageReadReceipts
    * const messageReadReceipts = await prisma.messageReadReceipt.findMany()
    * ```
    */
  get messageReadReceipt(): Prisma.MessageReadReceiptDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.parentChild`: Exposes CRUD operations for the **ParentChild** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParentChildren
    * const parentChildren = await prisma.parentChild.findMany()
    * ```
    */
  get parentChild(): Prisma.ParentChildDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programs
    * const programs = await prisma.program.findMany()
    * ```
    */
  get program(): Prisma.ProgramDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **Lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): Prisma.LessonDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.cohort`: Exposes CRUD operations for the **Cohort** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cohorts
    * const cohorts = await prisma.cohort.findMany()
    * ```
    */
  get cohort(): Prisma.CohortDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.classroom`: Exposes CRUD operations for the **Classroom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classroom.findMany()
    * ```
    */
  get classroom(): Prisma.ClassroomDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.evaluation`: Exposes CRUD operations for the **Evaluation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evaluations
    * const evaluations = await prisma.evaluation.findMany()
    * ```
    */
  get evaluation(): Prisma.EvaluationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.examResult`: Exposes CRUD operations for the **ExamResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamResults
    * const examResults = await prisma.examResult.findMany()
    * ```
    */
  get examResult(): Prisma.ExamResultDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.fee`: Exposes CRUD operations for the **Fee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fees
    * const fees = await prisma.fee.findMany()
    * ```
    */
  get fee(): Prisma.FeeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
