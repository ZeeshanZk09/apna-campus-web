
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Cohort` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Cohort
 * 
 */
export type CohortModel = runtime.Types.Result.DefaultSelection<Prisma.$CohortPayload>

export type AggregateCohort = {
  _count: CohortCountAggregateOutputType | null
  _min: CohortMinAggregateOutputType | null
  _max: CohortMaxAggregateOutputType | null
}

export type CohortMinAggregateOutputType = {
  id: string | null
  instituteId: string | null
  programId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CohortMaxAggregateOutputType = {
  id: string | null
  instituteId: string | null
  programId: string | null
  name: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CohortCountAggregateOutputType = {
  id: number
  instituteId: number
  programId: number
  name: number
  startDate: number
  endDate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CohortMinAggregateInputType = {
  id?: true
  instituteId?: true
  programId?: true
  name?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type CohortMaxAggregateInputType = {
  id?: true
  instituteId?: true
  programId?: true
  name?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type CohortCountAggregateInputType = {
  id?: true
  instituteId?: true
  programId?: true
  name?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CohortAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cohort to aggregate.
   */
  where?: Prisma.CohortWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cohorts to fetch.
   */
  orderBy?: Prisma.CohortOrderByWithRelationInput | Prisma.CohortOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CohortWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cohorts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cohorts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Cohorts
  **/
  _count?: true | CohortCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CohortMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CohortMaxAggregateInputType
}

export type GetCohortAggregateType<T extends CohortAggregateArgs> = {
      [P in keyof T & keyof AggregateCohort]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCohort[P]>
    : Prisma.GetScalarType<T[P], AggregateCohort[P]>
}




export type CohortGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CohortWhereInput
  orderBy?: Prisma.CohortOrderByWithAggregationInput | Prisma.CohortOrderByWithAggregationInput[]
  by: Prisma.CohortScalarFieldEnum[] | Prisma.CohortScalarFieldEnum
  having?: Prisma.CohortScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CohortCountAggregateInputType | true
  _min?: CohortMinAggregateInputType
  _max?: CohortMaxAggregateInputType
}

export type CohortGroupByOutputType = {
  id: string
  instituteId: string
  programId: string | null
  name: string
  startDate: Date
  endDate: Date | null
  createdAt: Date
  updatedAt: Date
  _count: CohortCountAggregateOutputType | null
  _min: CohortMinAggregateOutputType | null
  _max: CohortMaxAggregateOutputType | null
}

type GetCohortGroupByPayload<T extends CohortGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CohortGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CohortGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CohortGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CohortGroupByOutputType[P]>
      }
    >
  >



export type CohortWhereInput = {
  AND?: Prisma.CohortWhereInput | Prisma.CohortWhereInput[]
  OR?: Prisma.CohortWhereInput[]
  NOT?: Prisma.CohortWhereInput | Prisma.CohortWhereInput[]
  id?: Prisma.UuidFilter<"Cohort"> | string
  instituteId?: Prisma.UuidFilter<"Cohort"> | string
  programId?: Prisma.UuidNullableFilter<"Cohort"> | string | null
  name?: Prisma.StringFilter<"Cohort"> | string
  startDate?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Cohort"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  institute?: Prisma.XOR<Prisma.InstituteScalarRelationFilter, Prisma.InstituteWhereInput>
  program?: Prisma.XOR<Prisma.ProgramNullableScalarRelationFilter, Prisma.ProgramWhereInput> | null
  enrollments?: Prisma.EnrollmentListRelationFilter
  classrooms?: Prisma.ClassroomListRelationFilter
}

export type CohortOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  instituteId?: Prisma.SortOrder
  programId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  institute?: Prisma.InstituteOrderByWithRelationInput
  program?: Prisma.ProgramOrderByWithRelationInput
  enrollments?: Prisma.EnrollmentOrderByRelationAggregateInput
  classrooms?: Prisma.ClassroomOrderByRelationAggregateInput
}

export type CohortWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  instituteId_name?: Prisma.CohortInstituteIdNameCompoundUniqueInput
  AND?: Prisma.CohortWhereInput | Prisma.CohortWhereInput[]
  OR?: Prisma.CohortWhereInput[]
  NOT?: Prisma.CohortWhereInput | Prisma.CohortWhereInput[]
  instituteId?: Prisma.UuidFilter<"Cohort"> | string
  programId?: Prisma.UuidNullableFilter<"Cohort"> | string | null
  name?: Prisma.StringFilter<"Cohort"> | string
  startDate?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Cohort"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  institute?: Prisma.XOR<Prisma.InstituteScalarRelationFilter, Prisma.InstituteWhereInput>
  program?: Prisma.XOR<Prisma.ProgramNullableScalarRelationFilter, Prisma.ProgramWhereInput> | null
  enrollments?: Prisma.EnrollmentListRelationFilter
  classrooms?: Prisma.ClassroomListRelationFilter
}, "id" | "instituteId_name">

export type CohortOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  instituteId?: Prisma.SortOrder
  programId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CohortCountOrderByAggregateInput
  _max?: Prisma.CohortMaxOrderByAggregateInput
  _min?: Prisma.CohortMinOrderByAggregateInput
}

export type CohortScalarWhereWithAggregatesInput = {
  AND?: Prisma.CohortScalarWhereWithAggregatesInput | Prisma.CohortScalarWhereWithAggregatesInput[]
  OR?: Prisma.CohortScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CohortScalarWhereWithAggregatesInput | Prisma.CohortScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Cohort"> | string
  instituteId?: Prisma.UuidWithAggregatesFilter<"Cohort"> | string
  programId?: Prisma.UuidNullableWithAggregatesFilter<"Cohort"> | string | null
  name?: Prisma.StringWithAggregatesFilter<"Cohort"> | string
  startDate?: Prisma.DateTimeWithAggregatesFilter<"Cohort"> | Date | string
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Cohort"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Cohort"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Cohort"> | Date | string
}

export type CohortCreateInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  institute: Prisma.InstituteCreateNestedOneWithoutCohortsInput
  program?: Prisma.ProgramCreateNestedOneWithoutCohortsInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCohortInput
}

export type CohortUncheckedCreateInput = {
  id?: string
  instituteId: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCohortInput
}

export type CohortUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  institute?: Prisma.InstituteUpdateOneRequiredWithoutCohortsNestedInput
  program?: Prisma.ProgramUpdateOneWithoutCohortsNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCohortNestedInput
}

export type CohortCreateManyInput = {
  id?: string
  instituteId: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CohortUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CohortUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CohortListRelationFilter = {
  every?: Prisma.CohortWhereInput
  some?: Prisma.CohortWhereInput
  none?: Prisma.CohortWhereInput
}

export type CohortOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CohortInstituteIdNameCompoundUniqueInput = {
  instituteId: string
  name: string
}

export type CohortCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  instituteId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CohortMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  instituteId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CohortMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  instituteId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CohortNullableScalarRelationFilter = {
  is?: Prisma.CohortWhereInput | null
  isNot?: Prisma.CohortWhereInput | null
}

export type CohortScalarRelationFilter = {
  is?: Prisma.CohortWhereInput
  isNot?: Prisma.CohortWhereInput
}

export type CohortCreateNestedManyWithoutInstituteInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput> | Prisma.CohortCreateWithoutInstituteInput[] | Prisma.CohortUncheckedCreateWithoutInstituteInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutInstituteInput | Prisma.CohortCreateOrConnectWithoutInstituteInput[]
  createMany?: Prisma.CohortCreateManyInstituteInputEnvelope
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
}

export type CohortUncheckedCreateNestedManyWithoutInstituteInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput> | Prisma.CohortCreateWithoutInstituteInput[] | Prisma.CohortUncheckedCreateWithoutInstituteInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutInstituteInput | Prisma.CohortCreateOrConnectWithoutInstituteInput[]
  createMany?: Prisma.CohortCreateManyInstituteInputEnvelope
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
}

export type CohortUpdateManyWithoutInstituteNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput> | Prisma.CohortCreateWithoutInstituteInput[] | Prisma.CohortUncheckedCreateWithoutInstituteInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutInstituteInput | Prisma.CohortCreateOrConnectWithoutInstituteInput[]
  upsert?: Prisma.CohortUpsertWithWhereUniqueWithoutInstituteInput | Prisma.CohortUpsertWithWhereUniqueWithoutInstituteInput[]
  createMany?: Prisma.CohortCreateManyInstituteInputEnvelope
  set?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  disconnect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  delete?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  update?: Prisma.CohortUpdateWithWhereUniqueWithoutInstituteInput | Prisma.CohortUpdateWithWhereUniqueWithoutInstituteInput[]
  updateMany?: Prisma.CohortUpdateManyWithWhereWithoutInstituteInput | Prisma.CohortUpdateManyWithWhereWithoutInstituteInput[]
  deleteMany?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
}

export type CohortUncheckedUpdateManyWithoutInstituteNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput> | Prisma.CohortCreateWithoutInstituteInput[] | Prisma.CohortUncheckedCreateWithoutInstituteInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutInstituteInput | Prisma.CohortCreateOrConnectWithoutInstituteInput[]
  upsert?: Prisma.CohortUpsertWithWhereUniqueWithoutInstituteInput | Prisma.CohortUpsertWithWhereUniqueWithoutInstituteInput[]
  createMany?: Prisma.CohortCreateManyInstituteInputEnvelope
  set?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  disconnect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  delete?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  update?: Prisma.CohortUpdateWithWhereUniqueWithoutInstituteInput | Prisma.CohortUpdateWithWhereUniqueWithoutInstituteInput[]
  updateMany?: Prisma.CohortUpdateManyWithWhereWithoutInstituteInput | Prisma.CohortUpdateManyWithWhereWithoutInstituteInput[]
  deleteMany?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
}

export type CohortCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput> | Prisma.CohortCreateWithoutProgramInput[] | Prisma.CohortUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutProgramInput | Prisma.CohortCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.CohortCreateManyProgramInputEnvelope
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
}

export type CohortUncheckedCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput> | Prisma.CohortCreateWithoutProgramInput[] | Prisma.CohortUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutProgramInput | Prisma.CohortCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.CohortCreateManyProgramInputEnvelope
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
}

export type CohortUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput> | Prisma.CohortCreateWithoutProgramInput[] | Prisma.CohortUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutProgramInput | Prisma.CohortCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.CohortUpsertWithWhereUniqueWithoutProgramInput | Prisma.CohortUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.CohortCreateManyProgramInputEnvelope
  set?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  disconnect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  delete?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  update?: Prisma.CohortUpdateWithWhereUniqueWithoutProgramInput | Prisma.CohortUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.CohortUpdateManyWithWhereWithoutProgramInput | Prisma.CohortUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
}

export type CohortUncheckedUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput> | Prisma.CohortCreateWithoutProgramInput[] | Prisma.CohortUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutProgramInput | Prisma.CohortCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.CohortUpsertWithWhereUniqueWithoutProgramInput | Prisma.CohortUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.CohortCreateManyProgramInputEnvelope
  set?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  disconnect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  delete?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  connect?: Prisma.CohortWhereUniqueInput | Prisma.CohortWhereUniqueInput[]
  update?: Prisma.CohortUpdateWithWhereUniqueWithoutProgramInput | Prisma.CohortUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.CohortUpdateManyWithWhereWithoutProgramInput | Prisma.CohortUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
}

export type CohortCreateNestedOneWithoutClassroomsInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutClassroomsInput, Prisma.CohortUncheckedCreateWithoutClassroomsInput>
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutClassroomsInput
  connect?: Prisma.CohortWhereUniqueInput
}

export type CohortUpdateOneWithoutClassroomsNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutClassroomsInput, Prisma.CohortUncheckedCreateWithoutClassroomsInput>
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutClassroomsInput
  upsert?: Prisma.CohortUpsertWithoutClassroomsInput
  disconnect?: Prisma.CohortWhereInput | boolean
  delete?: Prisma.CohortWhereInput | boolean
  connect?: Prisma.CohortWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CohortUpdateToOneWithWhereWithoutClassroomsInput, Prisma.CohortUpdateWithoutClassroomsInput>, Prisma.CohortUncheckedUpdateWithoutClassroomsInput>
}

export type CohortCreateNestedOneWithoutEnrollmentsInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutEnrollmentsInput, Prisma.CohortUncheckedCreateWithoutEnrollmentsInput>
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutEnrollmentsInput
  connect?: Prisma.CohortWhereUniqueInput
}

export type CohortUpdateOneRequiredWithoutEnrollmentsNestedInput = {
  create?: Prisma.XOR<Prisma.CohortCreateWithoutEnrollmentsInput, Prisma.CohortUncheckedCreateWithoutEnrollmentsInput>
  connectOrCreate?: Prisma.CohortCreateOrConnectWithoutEnrollmentsInput
  upsert?: Prisma.CohortUpsertWithoutEnrollmentsInput
  connect?: Prisma.CohortWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CohortUpdateToOneWithWhereWithoutEnrollmentsInput, Prisma.CohortUpdateWithoutEnrollmentsInput>, Prisma.CohortUncheckedUpdateWithoutEnrollmentsInput>
}

export type CohortCreateWithoutInstituteInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  program?: Prisma.ProgramCreateNestedOneWithoutCohortsInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCohortInput
}

export type CohortUncheckedCreateWithoutInstituteInput = {
  id?: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCohortInput
}

export type CohortCreateOrConnectWithoutInstituteInput = {
  where: Prisma.CohortWhereUniqueInput
  create: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput>
}

export type CohortCreateManyInstituteInputEnvelope = {
  data: Prisma.CohortCreateManyInstituteInput | Prisma.CohortCreateManyInstituteInput[]
  skipDuplicates?: boolean
}

export type CohortUpsertWithWhereUniqueWithoutInstituteInput = {
  where: Prisma.CohortWhereUniqueInput
  update: Prisma.XOR<Prisma.CohortUpdateWithoutInstituteInput, Prisma.CohortUncheckedUpdateWithoutInstituteInput>
  create: Prisma.XOR<Prisma.CohortCreateWithoutInstituteInput, Prisma.CohortUncheckedCreateWithoutInstituteInput>
}

export type CohortUpdateWithWhereUniqueWithoutInstituteInput = {
  where: Prisma.CohortWhereUniqueInput
  data: Prisma.XOR<Prisma.CohortUpdateWithoutInstituteInput, Prisma.CohortUncheckedUpdateWithoutInstituteInput>
}

export type CohortUpdateManyWithWhereWithoutInstituteInput = {
  where: Prisma.CohortScalarWhereInput
  data: Prisma.XOR<Prisma.CohortUpdateManyMutationInput, Prisma.CohortUncheckedUpdateManyWithoutInstituteInput>
}

export type CohortScalarWhereInput = {
  AND?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
  OR?: Prisma.CohortScalarWhereInput[]
  NOT?: Prisma.CohortScalarWhereInput | Prisma.CohortScalarWhereInput[]
  id?: Prisma.UuidFilter<"Cohort"> | string
  instituteId?: Prisma.UuidFilter<"Cohort"> | string
  programId?: Prisma.UuidNullableFilter<"Cohort"> | string | null
  name?: Prisma.StringFilter<"Cohort"> | string
  startDate?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  endDate?: Prisma.DateTimeNullableFilter<"Cohort"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Cohort"> | Date | string
}

export type CohortCreateWithoutProgramInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  institute: Prisma.InstituteCreateNestedOneWithoutCohortsInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCohortInput
}

export type CohortUncheckedCreateWithoutProgramInput = {
  id?: string
  instituteId: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCohortInput
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCohortInput
}

export type CohortCreateOrConnectWithoutProgramInput = {
  where: Prisma.CohortWhereUniqueInput
  create: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput>
}

export type CohortCreateManyProgramInputEnvelope = {
  data: Prisma.CohortCreateManyProgramInput | Prisma.CohortCreateManyProgramInput[]
  skipDuplicates?: boolean
}

export type CohortUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.CohortWhereUniqueInput
  update: Prisma.XOR<Prisma.CohortUpdateWithoutProgramInput, Prisma.CohortUncheckedUpdateWithoutProgramInput>
  create: Prisma.XOR<Prisma.CohortCreateWithoutProgramInput, Prisma.CohortUncheckedCreateWithoutProgramInput>
}

export type CohortUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.CohortWhereUniqueInput
  data: Prisma.XOR<Prisma.CohortUpdateWithoutProgramInput, Prisma.CohortUncheckedUpdateWithoutProgramInput>
}

export type CohortUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.CohortScalarWhereInput
  data: Prisma.XOR<Prisma.CohortUpdateManyMutationInput, Prisma.CohortUncheckedUpdateManyWithoutProgramInput>
}

export type CohortCreateWithoutClassroomsInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  institute: Prisma.InstituteCreateNestedOneWithoutCohortsInput
  program?: Prisma.ProgramCreateNestedOneWithoutCohortsInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCohortInput
}

export type CohortUncheckedCreateWithoutClassroomsInput = {
  id?: string
  instituteId: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCohortInput
}

export type CohortCreateOrConnectWithoutClassroomsInput = {
  where: Prisma.CohortWhereUniqueInput
  create: Prisma.XOR<Prisma.CohortCreateWithoutClassroomsInput, Prisma.CohortUncheckedCreateWithoutClassroomsInput>
}

export type CohortUpsertWithoutClassroomsInput = {
  update: Prisma.XOR<Prisma.CohortUpdateWithoutClassroomsInput, Prisma.CohortUncheckedUpdateWithoutClassroomsInput>
  create: Prisma.XOR<Prisma.CohortCreateWithoutClassroomsInput, Prisma.CohortUncheckedCreateWithoutClassroomsInput>
  where?: Prisma.CohortWhereInput
}

export type CohortUpdateToOneWithWhereWithoutClassroomsInput = {
  where?: Prisma.CohortWhereInput
  data: Prisma.XOR<Prisma.CohortUpdateWithoutClassroomsInput, Prisma.CohortUncheckedUpdateWithoutClassroomsInput>
}

export type CohortUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  institute?: Prisma.InstituteUpdateOneRequiredWithoutCohortsNestedInput
  program?: Prisma.ProgramUpdateOneWithoutCohortsNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateWithoutClassroomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCohortNestedInput
}

export type CohortCreateWithoutEnrollmentsInput = {
  id?: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  institute: Prisma.InstituteCreateNestedOneWithoutCohortsInput
  program?: Prisma.ProgramCreateNestedOneWithoutCohortsInput
  classrooms?: Prisma.ClassroomCreateNestedManyWithoutCohortInput
}

export type CohortUncheckedCreateWithoutEnrollmentsInput = {
  id?: string
  instituteId: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  classrooms?: Prisma.ClassroomUncheckedCreateNestedManyWithoutCohortInput
}

export type CohortCreateOrConnectWithoutEnrollmentsInput = {
  where: Prisma.CohortWhereUniqueInput
  create: Prisma.XOR<Prisma.CohortCreateWithoutEnrollmentsInput, Prisma.CohortUncheckedCreateWithoutEnrollmentsInput>
}

export type CohortUpsertWithoutEnrollmentsInput = {
  update: Prisma.XOR<Prisma.CohortUpdateWithoutEnrollmentsInput, Prisma.CohortUncheckedUpdateWithoutEnrollmentsInput>
  create: Prisma.XOR<Prisma.CohortCreateWithoutEnrollmentsInput, Prisma.CohortUncheckedCreateWithoutEnrollmentsInput>
  where?: Prisma.CohortWhereInput
}

export type CohortUpdateToOneWithWhereWithoutEnrollmentsInput = {
  where?: Prisma.CohortWhereInput
  data: Prisma.XOR<Prisma.CohortUpdateWithoutEnrollmentsInput, Prisma.CohortUncheckedUpdateWithoutEnrollmentsInput>
}

export type CohortUpdateWithoutEnrollmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  institute?: Prisma.InstituteUpdateOneRequiredWithoutCohortsNestedInput
  program?: Prisma.ProgramUpdateOneWithoutCohortsNestedInput
  classrooms?: Prisma.ClassroomUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateWithoutEnrollmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCohortNestedInput
}

export type CohortCreateManyInstituteInput = {
  id?: string
  programId?: string | null
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CohortUpdateWithoutInstituteInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  program?: Prisma.ProgramUpdateOneWithoutCohortsNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateWithoutInstituteInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateManyWithoutInstituteInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CohortCreateManyProgramInput = {
  id?: string
  instituteId: string
  name: string
  startDate: Date | string
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CohortUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  institute?: Prisma.InstituteUpdateOneRequiredWithoutCohortsNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCohortNestedInput
  classrooms?: Prisma.ClassroomUncheckedUpdateManyWithoutCohortNestedInput
}

export type CohortUncheckedUpdateManyWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instituteId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type CohortCountOutputType
 */

export type CohortCountOutputType = {
  enrollments: number
  classrooms: number
}

export type CohortCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enrollments?: boolean | CohortCountOutputTypeCountEnrollmentsArgs
  classrooms?: boolean | CohortCountOutputTypeCountClassroomsArgs
}

/**
 * CohortCountOutputType without action
 */
export type CohortCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CohortCountOutputType
   */
  select?: Prisma.CohortCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CohortCountOutputType without action
 */
export type CohortCountOutputTypeCountEnrollmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnrollmentWhereInput
}

/**
 * CohortCountOutputType without action
 */
export type CohortCountOutputTypeCountClassroomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClassroomWhereInput
}


export type CohortSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  instituteId?: boolean
  programId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
  enrollments?: boolean | Prisma.Cohort$enrollmentsArgs<ExtArgs>
  classrooms?: boolean | Prisma.Cohort$classroomsArgs<ExtArgs>
  _count?: boolean | Prisma.CohortCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cohort"]>

export type CohortSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  instituteId?: boolean
  programId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
}, ExtArgs["result"]["cohort"]>

export type CohortSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  instituteId?: boolean
  programId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
}, ExtArgs["result"]["cohort"]>

export type CohortSelectScalar = {
  id?: boolean
  instituteId?: boolean
  programId?: boolean
  name?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CohortOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "instituteId" | "programId" | "name" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["cohort"]>
export type CohortInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
  enrollments?: boolean | Prisma.Cohort$enrollmentsArgs<ExtArgs>
  classrooms?: boolean | Prisma.Cohort$classroomsArgs<ExtArgs>
  _count?: boolean | Prisma.CohortCountOutputTypeDefaultArgs<ExtArgs>
}
export type CohortIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
}
export type CohortIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  institute?: boolean | Prisma.InstituteDefaultArgs<ExtArgs>
  program?: boolean | Prisma.Cohort$programArgs<ExtArgs>
}

export type $CohortPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Cohort"
  objects: {
    institute: Prisma.$InstitutePayload<ExtArgs>
    program: Prisma.$ProgramPayload<ExtArgs> | null
    enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
    classrooms: Prisma.$ClassroomPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    instituteId: string
    programId: string | null
    name: string
    startDate: Date
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["cohort"]>
  composites: {}
}

export type CohortGetPayload<S extends boolean | null | undefined | CohortDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CohortPayload, S>

export type CohortCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CohortFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CohortCountAggregateInputType | true
  }

export interface CohortDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cohort'], meta: { name: 'Cohort' } }
  /**
   * Find zero or one Cohort that matches the filter.
   * @param {CohortFindUniqueArgs} args - Arguments to find a Cohort
   * @example
   * // Get one Cohort
   * const cohort = await prisma.cohort.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CohortFindUniqueArgs>(args: Prisma.SelectSubset<T, CohortFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Cohort that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CohortFindUniqueOrThrowArgs} args - Arguments to find a Cohort
   * @example
   * // Get one Cohort
   * const cohort = await prisma.cohort.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CohortFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CohortFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cohort that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortFindFirstArgs} args - Arguments to find a Cohort
   * @example
   * // Get one Cohort
   * const cohort = await prisma.cohort.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CohortFindFirstArgs>(args?: Prisma.SelectSubset<T, CohortFindFirstArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cohort that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortFindFirstOrThrowArgs} args - Arguments to find a Cohort
   * @example
   * // Get one Cohort
   * const cohort = await prisma.cohort.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CohortFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CohortFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cohorts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cohorts
   * const cohorts = await prisma.cohort.findMany()
   * 
   * // Get first 10 Cohorts
   * const cohorts = await prisma.cohort.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cohortWithIdOnly = await prisma.cohort.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CohortFindManyArgs>(args?: Prisma.SelectSubset<T, CohortFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Cohort.
   * @param {CohortCreateArgs} args - Arguments to create a Cohort.
   * @example
   * // Create one Cohort
   * const Cohort = await prisma.cohort.create({
   *   data: {
   *     // ... data to create a Cohort
   *   }
   * })
   * 
   */
  create<T extends CohortCreateArgs>(args: Prisma.SelectSubset<T, CohortCreateArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cohorts.
   * @param {CohortCreateManyArgs} args - Arguments to create many Cohorts.
   * @example
   * // Create many Cohorts
   * const cohort = await prisma.cohort.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CohortCreateManyArgs>(args?: Prisma.SelectSubset<T, CohortCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Cohorts and returns the data saved in the database.
   * @param {CohortCreateManyAndReturnArgs} args - Arguments to create many Cohorts.
   * @example
   * // Create many Cohorts
   * const cohort = await prisma.cohort.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Cohorts and only return the `id`
   * const cohortWithIdOnly = await prisma.cohort.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CohortCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CohortCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Cohort.
   * @param {CohortDeleteArgs} args - Arguments to delete one Cohort.
   * @example
   * // Delete one Cohort
   * const Cohort = await prisma.cohort.delete({
   *   where: {
   *     // ... filter to delete one Cohort
   *   }
   * })
   * 
   */
  delete<T extends CohortDeleteArgs>(args: Prisma.SelectSubset<T, CohortDeleteArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Cohort.
   * @param {CohortUpdateArgs} args - Arguments to update one Cohort.
   * @example
   * // Update one Cohort
   * const cohort = await prisma.cohort.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CohortUpdateArgs>(args: Prisma.SelectSubset<T, CohortUpdateArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cohorts.
   * @param {CohortDeleteManyArgs} args - Arguments to filter Cohorts to delete.
   * @example
   * // Delete a few Cohorts
   * const { count } = await prisma.cohort.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CohortDeleteManyArgs>(args?: Prisma.SelectSubset<T, CohortDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cohorts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cohorts
   * const cohort = await prisma.cohort.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CohortUpdateManyArgs>(args: Prisma.SelectSubset<T, CohortUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cohorts and returns the data updated in the database.
   * @param {CohortUpdateManyAndReturnArgs} args - Arguments to update many Cohorts.
   * @example
   * // Update many Cohorts
   * const cohort = await prisma.cohort.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Cohorts and only return the `id`
   * const cohortWithIdOnly = await prisma.cohort.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CohortUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CohortUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Cohort.
   * @param {CohortUpsertArgs} args - Arguments to update or create a Cohort.
   * @example
   * // Update or create a Cohort
   * const cohort = await prisma.cohort.upsert({
   *   create: {
   *     // ... data to create a Cohort
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Cohort we want to update
   *   }
   * })
   */
  upsert<T extends CohortUpsertArgs>(args: Prisma.SelectSubset<T, CohortUpsertArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cohorts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortCountArgs} args - Arguments to filter Cohorts to count.
   * @example
   * // Count the number of Cohorts
   * const count = await prisma.cohort.count({
   *   where: {
   *     // ... the filter for the Cohorts we want to count
   *   }
   * })
  **/
  count<T extends CohortCountArgs>(
    args?: Prisma.Subset<T, CohortCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CohortCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Cohort.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CohortAggregateArgs>(args: Prisma.Subset<T, CohortAggregateArgs>): Prisma.PrismaPromise<GetCohortAggregateType<T>>

  /**
   * Group by Cohort.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CohortGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CohortGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CohortGroupByArgs['orderBy'] }
      : { orderBy?: CohortGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CohortGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCohortGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Cohort model
 */
readonly fields: CohortFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Cohort.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CohortClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  institute<T extends Prisma.InstituteDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InstituteDefaultArgs<ExtArgs>>): Prisma.Prisma__InstituteClient<runtime.Types.Result.GetResult<Prisma.$InstitutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  program<T extends Prisma.Cohort$programArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Cohort$programArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  enrollments<T extends Prisma.Cohort$enrollmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Cohort$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  classrooms<T extends Prisma.Cohort$classroomsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Cohort$classroomsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Cohort model
 */
export interface CohortFieldRefs {
  readonly id: Prisma.FieldRef<"Cohort", 'String'>
  readonly instituteId: Prisma.FieldRef<"Cohort", 'String'>
  readonly programId: Prisma.FieldRef<"Cohort", 'String'>
  readonly name: Prisma.FieldRef<"Cohort", 'String'>
  readonly startDate: Prisma.FieldRef<"Cohort", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Cohort", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Cohort", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Cohort", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Cohort findUnique
 */
export type CohortFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter, which Cohort to fetch.
   */
  where: Prisma.CohortWhereUniqueInput
}

/**
 * Cohort findUniqueOrThrow
 */
export type CohortFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter, which Cohort to fetch.
   */
  where: Prisma.CohortWhereUniqueInput
}

/**
 * Cohort findFirst
 */
export type CohortFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter, which Cohort to fetch.
   */
  where?: Prisma.CohortWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cohorts to fetch.
   */
  orderBy?: Prisma.CohortOrderByWithRelationInput | Prisma.CohortOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cohorts.
   */
  cursor?: Prisma.CohortWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cohorts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cohorts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cohorts.
   */
  distinct?: Prisma.CohortScalarFieldEnum | Prisma.CohortScalarFieldEnum[]
}

/**
 * Cohort findFirstOrThrow
 */
export type CohortFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter, which Cohort to fetch.
   */
  where?: Prisma.CohortWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cohorts to fetch.
   */
  orderBy?: Prisma.CohortOrderByWithRelationInput | Prisma.CohortOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cohorts.
   */
  cursor?: Prisma.CohortWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cohorts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cohorts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cohorts.
   */
  distinct?: Prisma.CohortScalarFieldEnum | Prisma.CohortScalarFieldEnum[]
}

/**
 * Cohort findMany
 */
export type CohortFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter, which Cohorts to fetch.
   */
  where?: Prisma.CohortWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cohorts to fetch.
   */
  orderBy?: Prisma.CohortOrderByWithRelationInput | Prisma.CohortOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Cohorts.
   */
  cursor?: Prisma.CohortWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cohorts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cohorts.
   */
  skip?: number
  distinct?: Prisma.CohortScalarFieldEnum | Prisma.CohortScalarFieldEnum[]
}

/**
 * Cohort create
 */
export type CohortCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * The data needed to create a Cohort.
   */
  data: Prisma.XOR<Prisma.CohortCreateInput, Prisma.CohortUncheckedCreateInput>
}

/**
 * Cohort createMany
 */
export type CohortCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Cohorts.
   */
  data: Prisma.CohortCreateManyInput | Prisma.CohortCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Cohort createManyAndReturn
 */
export type CohortCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * The data used to create many Cohorts.
   */
  data: Prisma.CohortCreateManyInput | Prisma.CohortCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Cohort update
 */
export type CohortUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * The data needed to update a Cohort.
   */
  data: Prisma.XOR<Prisma.CohortUpdateInput, Prisma.CohortUncheckedUpdateInput>
  /**
   * Choose, which Cohort to update.
   */
  where: Prisma.CohortWhereUniqueInput
}

/**
 * Cohort updateMany
 */
export type CohortUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Cohorts.
   */
  data: Prisma.XOR<Prisma.CohortUpdateManyMutationInput, Prisma.CohortUncheckedUpdateManyInput>
  /**
   * Filter which Cohorts to update
   */
  where?: Prisma.CohortWhereInput
  /**
   * Limit how many Cohorts to update.
   */
  limit?: number
}

/**
 * Cohort updateManyAndReturn
 */
export type CohortUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * The data used to update Cohorts.
   */
  data: Prisma.XOR<Prisma.CohortUpdateManyMutationInput, Prisma.CohortUncheckedUpdateManyInput>
  /**
   * Filter which Cohorts to update
   */
  where?: Prisma.CohortWhereInput
  /**
   * Limit how many Cohorts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Cohort upsert
 */
export type CohortUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * The filter to search for the Cohort to update in case it exists.
   */
  where: Prisma.CohortWhereUniqueInput
  /**
   * In case the Cohort found by the `where` argument doesn't exist, create a new Cohort with this data.
   */
  create: Prisma.XOR<Prisma.CohortCreateInput, Prisma.CohortUncheckedCreateInput>
  /**
   * In case the Cohort was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CohortUpdateInput, Prisma.CohortUncheckedUpdateInput>
}

/**
 * Cohort delete
 */
export type CohortDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  /**
   * Filter which Cohort to delete.
   */
  where: Prisma.CohortWhereUniqueInput
}

/**
 * Cohort deleteMany
 */
export type CohortDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cohorts to delete
   */
  where?: Prisma.CohortWhereInput
  /**
   * Limit how many Cohorts to delete.
   */
  limit?: number
}

/**
 * Cohort.program
 */
export type Cohort$programArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  where?: Prisma.ProgramWhereInput
}

/**
 * Cohort.enrollments
 */
export type Cohort$enrollmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enrollment
   */
  select?: Prisma.EnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enrollment
   */
  omit?: Prisma.EnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnrollmentInclude<ExtArgs> | null
  where?: Prisma.EnrollmentWhereInput
  orderBy?: Prisma.EnrollmentOrderByWithRelationInput | Prisma.EnrollmentOrderByWithRelationInput[]
  cursor?: Prisma.EnrollmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EnrollmentScalarFieldEnum | Prisma.EnrollmentScalarFieldEnum[]
}

/**
 * Cohort.classrooms
 */
export type Cohort$classroomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  where?: Prisma.ClassroomWhereInput
  orderBy?: Prisma.ClassroomOrderByWithRelationInput | Prisma.ClassroomOrderByWithRelationInput[]
  cursor?: Prisma.ClassroomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClassroomScalarFieldEnum | Prisma.ClassroomScalarFieldEnum[]
}

/**
 * Cohort without action
 */
export type CohortDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
}
