
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Attendance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Attendance
 * 
 */
export type AttendanceModel = runtime.Types.Result.DefaultSelection<Prisma.$AttendancePayload>

export type AggregateAttendance = {
  _count: AttendanceCountAggregateOutputType | null
  _min: AttendanceMinAggregateOutputType | null
  _max: AttendanceMaxAggregateOutputType | null
}

export type AttendanceMinAggregateOutputType = {
  id: string | null
  enrollmentId: string | null
  date: Date | null
  status: $Enums.AttendanceStatus | null
  note: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AttendanceMaxAggregateOutputType = {
  id: string | null
  enrollmentId: string | null
  date: Date | null
  status: $Enums.AttendanceStatus | null
  note: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AttendanceCountAggregateOutputType = {
  id: number
  enrollmentId: number
  date: number
  status: number
  note: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AttendanceMinAggregateInputType = {
  id?: true
  enrollmentId?: true
  date?: true
  status?: true
  note?: true
  createdAt?: true
  updatedAt?: true
}

export type AttendanceMaxAggregateInputType = {
  id?: true
  enrollmentId?: true
  date?: true
  status?: true
  note?: true
  createdAt?: true
  updatedAt?: true
}

export type AttendanceCountAggregateInputType = {
  id?: true
  enrollmentId?: true
  date?: true
  status?: true
  note?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AttendanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Attendance to aggregate.
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attendances to fetch.
   */
  orderBy?: Prisma.AttendanceOrderByWithRelationInput | Prisma.AttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Attendances
  **/
  _count?: true | AttendanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AttendanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AttendanceMaxAggregateInputType
}

export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
      [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAttendance[P]>
    : Prisma.GetScalarType<T[P], AggregateAttendance[P]>
}




export type AttendanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AttendanceWhereInput
  orderBy?: Prisma.AttendanceOrderByWithAggregationInput | Prisma.AttendanceOrderByWithAggregationInput[]
  by: Prisma.AttendanceScalarFieldEnum[] | Prisma.AttendanceScalarFieldEnum
  having?: Prisma.AttendanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AttendanceCountAggregateInputType | true
  _min?: AttendanceMinAggregateInputType
  _max?: AttendanceMaxAggregateInputType
}

export type AttendanceGroupByOutputType = {
  id: string
  enrollmentId: string
  date: Date
  status: $Enums.AttendanceStatus
  note: string | null
  createdAt: Date
  updatedAt: Date
  _count: AttendanceCountAggregateOutputType | null
  _min: AttendanceMinAggregateOutputType | null
  _max: AttendanceMaxAggregateOutputType | null
}

type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AttendanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AttendanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AttendanceGroupByOutputType[P]>
      }
    >
  >



export type AttendanceWhereInput = {
  AND?: Prisma.AttendanceWhereInput | Prisma.AttendanceWhereInput[]
  OR?: Prisma.AttendanceWhereInput[]
  NOT?: Prisma.AttendanceWhereInput | Prisma.AttendanceWhereInput[]
  id?: Prisma.UuidFilter<"Attendance"> | string
  enrollmentId?: Prisma.UuidFilter<"Attendance"> | string
  date?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  status?: Prisma.EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
  note?: Prisma.StringNullableFilter<"Attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  enrollment?: Prisma.XOR<Prisma.EnrollmentScalarRelationFilter, Prisma.EnrollmentWhereInput>
}

export type AttendanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  enrollmentId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  enrollment?: Prisma.EnrollmentOrderByWithRelationInput
}

export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AttendanceWhereInput | Prisma.AttendanceWhereInput[]
  OR?: Prisma.AttendanceWhereInput[]
  NOT?: Prisma.AttendanceWhereInput | Prisma.AttendanceWhereInput[]
  enrollmentId?: Prisma.UuidFilter<"Attendance"> | string
  date?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  status?: Prisma.EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
  note?: Prisma.StringNullableFilter<"Attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  enrollment?: Prisma.XOR<Prisma.EnrollmentScalarRelationFilter, Prisma.EnrollmentWhereInput>
}, "id">

export type AttendanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  enrollmentId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  note?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AttendanceCountOrderByAggregateInput
  _max?: Prisma.AttendanceMaxOrderByAggregateInput
  _min?: Prisma.AttendanceMinOrderByAggregateInput
}

export type AttendanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.AttendanceScalarWhereWithAggregatesInput | Prisma.AttendanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.AttendanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AttendanceScalarWhereWithAggregatesInput | Prisma.AttendanceScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Attendance"> | string
  enrollmentId?: Prisma.UuidWithAggregatesFilter<"Attendance"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"Attendance"> | Date | string
  status?: Prisma.EnumAttendanceStatusWithAggregatesFilter<"Attendance"> | $Enums.AttendanceStatus
  note?: Prisma.StringNullableWithAggregatesFilter<"Attendance"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Attendance"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Attendance"> | Date | string
}

export type AttendanceCreateInput = {
  id?: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollment: Prisma.EnrollmentCreateNestedOneWithoutAttendanceInput
}

export type AttendanceUncheckedCreateInput = {
  id?: string
  enrollmentId: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AttendanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollment?: Prisma.EnrollmentUpdateOneRequiredWithoutAttendanceNestedInput
}

export type AttendanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  enrollmentId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceCreateManyInput = {
  id?: string
  enrollmentId: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AttendanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  enrollmentId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceListRelationFilter = {
  every?: Prisma.AttendanceWhereInput
  some?: Prisma.AttendanceWhereInput
  none?: Prisma.AttendanceWhereInput
}

export type AttendanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AttendanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enrollmentId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AttendanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enrollmentId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AttendanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enrollmentId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AttendanceCreateNestedManyWithoutEnrollmentInput = {
  create?: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput> | Prisma.AttendanceCreateWithoutEnrollmentInput[] | Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput[]
  connectOrCreate?: Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput | Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput[]
  createMany?: Prisma.AttendanceCreateManyEnrollmentInputEnvelope
  connect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
}

export type AttendanceUncheckedCreateNestedManyWithoutEnrollmentInput = {
  create?: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput> | Prisma.AttendanceCreateWithoutEnrollmentInput[] | Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput[]
  connectOrCreate?: Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput | Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput[]
  createMany?: Prisma.AttendanceCreateManyEnrollmentInputEnvelope
  connect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
}

export type AttendanceUpdateManyWithoutEnrollmentNestedInput = {
  create?: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput> | Prisma.AttendanceCreateWithoutEnrollmentInput[] | Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput[]
  connectOrCreate?: Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput | Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput[]
  upsert?: Prisma.AttendanceUpsertWithWhereUniqueWithoutEnrollmentInput | Prisma.AttendanceUpsertWithWhereUniqueWithoutEnrollmentInput[]
  createMany?: Prisma.AttendanceCreateManyEnrollmentInputEnvelope
  set?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  disconnect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  delete?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  connect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  update?: Prisma.AttendanceUpdateWithWhereUniqueWithoutEnrollmentInput | Prisma.AttendanceUpdateWithWhereUniqueWithoutEnrollmentInput[]
  updateMany?: Prisma.AttendanceUpdateManyWithWhereWithoutEnrollmentInput | Prisma.AttendanceUpdateManyWithWhereWithoutEnrollmentInput[]
  deleteMany?: Prisma.AttendanceScalarWhereInput | Prisma.AttendanceScalarWhereInput[]
}

export type AttendanceUncheckedUpdateManyWithoutEnrollmentNestedInput = {
  create?: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput> | Prisma.AttendanceCreateWithoutEnrollmentInput[] | Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput[]
  connectOrCreate?: Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput | Prisma.AttendanceCreateOrConnectWithoutEnrollmentInput[]
  upsert?: Prisma.AttendanceUpsertWithWhereUniqueWithoutEnrollmentInput | Prisma.AttendanceUpsertWithWhereUniqueWithoutEnrollmentInput[]
  createMany?: Prisma.AttendanceCreateManyEnrollmentInputEnvelope
  set?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  disconnect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  delete?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  connect?: Prisma.AttendanceWhereUniqueInput | Prisma.AttendanceWhereUniqueInput[]
  update?: Prisma.AttendanceUpdateWithWhereUniqueWithoutEnrollmentInput | Prisma.AttendanceUpdateWithWhereUniqueWithoutEnrollmentInput[]
  updateMany?: Prisma.AttendanceUpdateManyWithWhereWithoutEnrollmentInput | Prisma.AttendanceUpdateManyWithWhereWithoutEnrollmentInput[]
  deleteMany?: Prisma.AttendanceScalarWhereInput | Prisma.AttendanceScalarWhereInput[]
}

export type EnumAttendanceStatusFieldUpdateOperationsInput = {
  set?: $Enums.AttendanceStatus
}

export type AttendanceCreateWithoutEnrollmentInput = {
  id?: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AttendanceUncheckedCreateWithoutEnrollmentInput = {
  id?: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AttendanceCreateOrConnectWithoutEnrollmentInput = {
  where: Prisma.AttendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput>
}

export type AttendanceCreateManyEnrollmentInputEnvelope = {
  data: Prisma.AttendanceCreateManyEnrollmentInput | Prisma.AttendanceCreateManyEnrollmentInput[]
  skipDuplicates?: boolean
}

export type AttendanceUpsertWithWhereUniqueWithoutEnrollmentInput = {
  where: Prisma.AttendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.AttendanceUpdateWithoutEnrollmentInput, Prisma.AttendanceUncheckedUpdateWithoutEnrollmentInput>
  create: Prisma.XOR<Prisma.AttendanceCreateWithoutEnrollmentInput, Prisma.AttendanceUncheckedCreateWithoutEnrollmentInput>
}

export type AttendanceUpdateWithWhereUniqueWithoutEnrollmentInput = {
  where: Prisma.AttendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.AttendanceUpdateWithoutEnrollmentInput, Prisma.AttendanceUncheckedUpdateWithoutEnrollmentInput>
}

export type AttendanceUpdateManyWithWhereWithoutEnrollmentInput = {
  where: Prisma.AttendanceScalarWhereInput
  data: Prisma.XOR<Prisma.AttendanceUpdateManyMutationInput, Prisma.AttendanceUncheckedUpdateManyWithoutEnrollmentInput>
}

export type AttendanceScalarWhereInput = {
  AND?: Prisma.AttendanceScalarWhereInput | Prisma.AttendanceScalarWhereInput[]
  OR?: Prisma.AttendanceScalarWhereInput[]
  NOT?: Prisma.AttendanceScalarWhereInput | Prisma.AttendanceScalarWhereInput[]
  id?: Prisma.UuidFilter<"Attendance"> | string
  enrollmentId?: Prisma.UuidFilter<"Attendance"> | string
  date?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  status?: Prisma.EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
  note?: Prisma.StringNullableFilter<"Attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Attendance"> | Date | string
}

export type AttendanceCreateManyEnrollmentInput = {
  id?: string
  date: Date | string
  status?: $Enums.AttendanceStatus
  note?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AttendanceUpdateWithoutEnrollmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceUncheckedUpdateWithoutEnrollmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceUncheckedUpdateManyWithoutEnrollmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AttendanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enrollmentId?: boolean
  date?: boolean
  status?: boolean
  note?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["attendance"]>

export type AttendanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enrollmentId?: boolean
  date?: boolean
  status?: boolean
  note?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["attendance"]>

export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enrollmentId?: boolean
  date?: boolean
  status?: boolean
  note?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["attendance"]>

export type AttendanceSelectScalar = {
  id?: boolean
  enrollmentId?: boolean
  date?: boolean
  status?: boolean
  note?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AttendanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "enrollmentId" | "date" | "status" | "note" | "createdAt" | "updatedAt", ExtArgs["result"]["attendance"]>
export type AttendanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}
export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}
export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enrollment?: boolean | Prisma.EnrollmentDefaultArgs<ExtArgs>
}

export type $AttendancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Attendance"
  objects: {
    enrollment: Prisma.$EnrollmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    enrollmentId: string
    date: Date
    status: $Enums.AttendanceStatus
    note: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["attendance"]>
  composites: {}
}

export type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AttendancePayload, S>

export type AttendanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AttendanceCountAggregateInputType | true
  }

export interface AttendanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
  /**
   * Find zero or one Attendance that matches the filter.
   * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AttendanceFindUniqueArgs>(args: Prisma.SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attendance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AttendanceFindFirstArgs>(args?: Prisma.SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attendance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Attendances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Attendances
   * const attendances = await prisma.attendance.findMany()
   * 
   * // Get first 10 Attendances
   * const attendances = await prisma.attendance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AttendanceFindManyArgs>(args?: Prisma.SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Attendance.
   * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
   * @example
   * // Create one Attendance
   * const Attendance = await prisma.attendance.create({
   *   data: {
   *     // ... data to create a Attendance
   *   }
   * })
   * 
   */
  create<T extends AttendanceCreateArgs>(args: Prisma.SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Attendances.
   * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
   * @example
   * // Create many Attendances
   * const attendance = await prisma.attendance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AttendanceCreateManyArgs>(args?: Prisma.SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Attendances and returns the data saved in the database.
   * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
   * @example
   * // Create many Attendances
   * const attendance = await prisma.attendance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Attendances and only return the `id`
   * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Attendance.
   * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
   * @example
   * // Delete one Attendance
   * const Attendance = await prisma.attendance.delete({
   *   where: {
   *     // ... filter to delete one Attendance
   *   }
   * })
   * 
   */
  delete<T extends AttendanceDeleteArgs>(args: Prisma.SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Attendance.
   * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
   * @example
   * // Update one Attendance
   * const attendance = await prisma.attendance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AttendanceUpdateArgs>(args: Prisma.SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Attendances.
   * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
   * @example
   * // Delete a few Attendances
   * const { count } = await prisma.attendance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AttendanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Attendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Attendances
   * const attendance = await prisma.attendance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AttendanceUpdateManyArgs>(args: Prisma.SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Attendances and returns the data updated in the database.
   * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
   * @example
   * // Update many Attendances
   * const attendance = await prisma.attendance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Attendances and only return the `id`
   * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Attendance.
   * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
   * @example
   * // Update or create a Attendance
   * const attendance = await prisma.attendance.upsert({
   *   create: {
   *     // ... data to create a Attendance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Attendance we want to update
   *   }
   * })
   */
  upsert<T extends AttendanceUpsertArgs>(args: Prisma.SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma.Prisma__AttendanceClient<runtime.Types.Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Attendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
   * @example
   * // Count the number of Attendances
   * const count = await prisma.attendance.count({
   *   where: {
   *     // ... the filter for the Attendances we want to count
   *   }
   * })
  **/
  count<T extends AttendanceCountArgs>(
    args?: Prisma.Subset<T, AttendanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AttendanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Attendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AttendanceAggregateArgs>(args: Prisma.Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

  /**
   * Group by Attendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AttendanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AttendanceGroupByArgs['orderBy'] }
      : { orderBy?: AttendanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Attendance model
 */
readonly fields: AttendanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Attendance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  enrollment<T extends Prisma.EnrollmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EnrollmentDefaultArgs<ExtArgs>>): Prisma.Prisma__EnrollmentClient<runtime.Types.Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Attendance model
 */
export interface AttendanceFieldRefs {
  readonly id: Prisma.FieldRef<"Attendance", 'String'>
  readonly enrollmentId: Prisma.FieldRef<"Attendance", 'String'>
  readonly date: Prisma.FieldRef<"Attendance", 'DateTime'>
  readonly status: Prisma.FieldRef<"Attendance", 'AttendanceStatus'>
  readonly note: Prisma.FieldRef<"Attendance", 'String'>
  readonly createdAt: Prisma.FieldRef<"Attendance", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Attendance", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Attendance findUnique
 */
export type AttendanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter, which Attendance to fetch.
   */
  where: Prisma.AttendanceWhereUniqueInput
}

/**
 * Attendance findUniqueOrThrow
 */
export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter, which Attendance to fetch.
   */
  where: Prisma.AttendanceWhereUniqueInput
}

/**
 * Attendance findFirst
 */
export type AttendanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter, which Attendance to fetch.
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attendances to fetch.
   */
  orderBy?: Prisma.AttendanceOrderByWithRelationInput | Prisma.AttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Attendances.
   */
  cursor?: Prisma.AttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Attendances.
   */
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * Attendance findFirstOrThrow
 */
export type AttendanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter, which Attendance to fetch.
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attendances to fetch.
   */
  orderBy?: Prisma.AttendanceOrderByWithRelationInput | Prisma.AttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Attendances.
   */
  cursor?: Prisma.AttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Attendances.
   */
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * Attendance findMany
 */
export type AttendanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter, which Attendances to fetch.
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attendances to fetch.
   */
  orderBy?: Prisma.AttendanceOrderByWithRelationInput | Prisma.AttendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Attendances.
   */
  cursor?: Prisma.AttendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attendances.
   */
  skip?: number
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * Attendance create
 */
export type AttendanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * The data needed to create a Attendance.
   */
  data: Prisma.XOR<Prisma.AttendanceCreateInput, Prisma.AttendanceUncheckedCreateInput>
}

/**
 * Attendance createMany
 */
export type AttendanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Attendances.
   */
  data: Prisma.AttendanceCreateManyInput | Prisma.AttendanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Attendance createManyAndReturn
 */
export type AttendanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * The data used to create many Attendances.
   */
  data: Prisma.AttendanceCreateManyInput | Prisma.AttendanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Attendance update
 */
export type AttendanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * The data needed to update a Attendance.
   */
  data: Prisma.XOR<Prisma.AttendanceUpdateInput, Prisma.AttendanceUncheckedUpdateInput>
  /**
   * Choose, which Attendance to update.
   */
  where: Prisma.AttendanceWhereUniqueInput
}

/**
 * Attendance updateMany
 */
export type AttendanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Attendances.
   */
  data: Prisma.XOR<Prisma.AttendanceUpdateManyMutationInput, Prisma.AttendanceUncheckedUpdateManyInput>
  /**
   * Filter which Attendances to update
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * Limit how many Attendances to update.
   */
  limit?: number
}

/**
 * Attendance updateManyAndReturn
 */
export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * The data used to update Attendances.
   */
  data: Prisma.XOR<Prisma.AttendanceUpdateManyMutationInput, Prisma.AttendanceUncheckedUpdateManyInput>
  /**
   * Filter which Attendances to update
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * Limit how many Attendances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Attendance upsert
 */
export type AttendanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * The filter to search for the Attendance to update in case it exists.
   */
  where: Prisma.AttendanceWhereUniqueInput
  /**
   * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
   */
  create: Prisma.XOR<Prisma.AttendanceCreateInput, Prisma.AttendanceUncheckedCreateInput>
  /**
   * In case the Attendance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AttendanceUpdateInput, Prisma.AttendanceUncheckedUpdateInput>
}

/**
 * Attendance delete
 */
export type AttendanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
  /**
   * Filter which Attendance to delete.
   */
  where: Prisma.AttendanceWhereUniqueInput
}

/**
 * Attendance deleteMany
 */
export type AttendanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Attendances to delete
   */
  where?: Prisma.AttendanceWhereInput
  /**
   * Limit how many Attendances to delete.
   */
  limit?: number
}

/**
 * Attendance without action
 */
export type AttendanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attendance
   */
  select?: Prisma.AttendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attendance
   */
  omit?: Prisma.AttendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendanceInclude<ExtArgs> | null
}
