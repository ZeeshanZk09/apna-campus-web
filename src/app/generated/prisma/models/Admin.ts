
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Admin` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Admin
 * 
 */
export type AdminModel = runtime.Types.Result.DefaultSelection<Prisma.$AdminPayload>

export type AggregateAdmin = {
  _count: AdminCountAggregateOutputType | null
  _min: AdminMinAggregateOutputType | null
  _max: AdminMaxAggregateOutputType | null
}

export type AdminMinAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  password: string | null
  profilePic: string | null
  coverPic: string | null
  isBlocked: boolean | null
  isDeleted: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdminMaxAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  password: string | null
  profilePic: string | null
  coverPic: string | null
  isBlocked: boolean | null
  isDeleted: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdminCountAggregateOutputType = {
  id: number
  firstName: number
  lastName: number
  email: number
  password: number
  profilePic: number
  coverPic: number
  isBlocked: number
  isDeleted: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AdminMinAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  password?: true
  profilePic?: true
  coverPic?: true
  isBlocked?: true
  isDeleted?: true
  createdAt?: true
  updatedAt?: true
}

export type AdminMaxAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  password?: true
  profilePic?: true
  coverPic?: true
  isBlocked?: true
  isDeleted?: true
  createdAt?: true
  updatedAt?: true
}

export type AdminCountAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  password?: true
  profilePic?: true
  coverPic?: true
  isBlocked?: true
  isDeleted?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AdminAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Admin to aggregate.
   */
  where?: Prisma.AdminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminOrderByWithRelationInput | Prisma.AdminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Admins
  **/
  _count?: true | AdminCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdminMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdminMaxAggregateInputType
}

export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
      [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdmin[P]>
    : Prisma.GetScalarType<T[P], AggregateAdmin[P]>
}




export type AdminGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdminWhereInput
  orderBy?: Prisma.AdminOrderByWithAggregationInput | Prisma.AdminOrderByWithAggregationInput[]
  by: Prisma.AdminScalarFieldEnum[] | Prisma.AdminScalarFieldEnum
  having?: Prisma.AdminScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdminCountAggregateInputType | true
  _min?: AdminMinAggregateInputType
  _max?: AdminMaxAggregateInputType
}

export type AdminGroupByOutputType = {
  id: string
  firstName: string
  lastName: string | null
  email: string
  password: string
  profilePic: string | null
  coverPic: string | null
  isBlocked: boolean
  isDeleted: boolean
  createdAt: Date
  updatedAt: Date | null
  _count: AdminCountAggregateOutputType | null
  _min: AdminMinAggregateOutputType | null
  _max: AdminMaxAggregateOutputType | null
}

type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdminGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdminGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdminGroupByOutputType[P]>
      }
    >
  >



export type AdminWhereInput = {
  AND?: Prisma.AdminWhereInput | Prisma.AdminWhereInput[]
  OR?: Prisma.AdminWhereInput[]
  NOT?: Prisma.AdminWhereInput | Prisma.AdminWhereInput[]
  id?: Prisma.UuidFilter<"Admin"> | string
  firstName?: Prisma.StringFilter<"Admin"> | string
  lastName?: Prisma.StringNullableFilter<"Admin"> | string | null
  email?: Prisma.StringFilter<"Admin"> | string
  password?: Prisma.StringFilter<"Admin"> | string
  profilePic?: Prisma.StringNullableFilter<"Admin"> | string | null
  coverPic?: Prisma.StringNullableFilter<"Admin"> | string | null
  isBlocked?: Prisma.BoolFilter<"Admin"> | boolean
  isDeleted?: Prisma.BoolFilter<"Admin"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Admin"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Admin"> | Date | string | null
  posts?: Prisma.PostListRelationFilter
  comments?: Prisma.CommentListRelationFilter
  auditLogs?: Prisma.AuditLogListRelationFilter
  conversation?: Prisma.ConversationListRelationFilter
  message?: Prisma.MessageListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
}

export type AdminOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  profilePic?: Prisma.SortOrderInput | Prisma.SortOrder
  coverPic?: Prisma.SortOrderInput | Prisma.SortOrder
  isBlocked?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  posts?: Prisma.PostOrderByRelationAggregateInput
  comments?: Prisma.CommentOrderByRelationAggregateInput
  auditLogs?: Prisma.AuditLogOrderByRelationAggregateInput
  conversation?: Prisma.ConversationOrderByRelationAggregateInput
  message?: Prisma.MessageOrderByRelationAggregateInput
  notifications?: Prisma.NotificationOrderByRelationAggregateInput
}

export type AdminWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.AdminWhereInput | Prisma.AdminWhereInput[]
  OR?: Prisma.AdminWhereInput[]
  NOT?: Prisma.AdminWhereInput | Prisma.AdminWhereInput[]
  firstName?: Prisma.StringFilter<"Admin"> | string
  lastName?: Prisma.StringNullableFilter<"Admin"> | string | null
  password?: Prisma.StringFilter<"Admin"> | string
  profilePic?: Prisma.StringNullableFilter<"Admin"> | string | null
  coverPic?: Prisma.StringNullableFilter<"Admin"> | string | null
  isBlocked?: Prisma.BoolFilter<"Admin"> | boolean
  isDeleted?: Prisma.BoolFilter<"Admin"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Admin"> | Date | string
  updatedAt?: Prisma.DateTimeNullableFilter<"Admin"> | Date | string | null
  posts?: Prisma.PostListRelationFilter
  comments?: Prisma.CommentListRelationFilter
  auditLogs?: Prisma.AuditLogListRelationFilter
  conversation?: Prisma.ConversationListRelationFilter
  message?: Prisma.MessageListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
}, "id" | "email">

export type AdminOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  profilePic?: Prisma.SortOrderInput | Prisma.SortOrder
  coverPic?: Prisma.SortOrderInput | Prisma.SortOrder
  isBlocked?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AdminCountOrderByAggregateInput
  _max?: Prisma.AdminMaxOrderByAggregateInput
  _min?: Prisma.AdminMinOrderByAggregateInput
}

export type AdminScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdminScalarWhereWithAggregatesInput | Prisma.AdminScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdminScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdminScalarWhereWithAggregatesInput | Prisma.AdminScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Admin"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"Admin"> | string
  lastName?: Prisma.StringNullableWithAggregatesFilter<"Admin"> | string | null
  email?: Prisma.StringWithAggregatesFilter<"Admin"> | string
  password?: Prisma.StringWithAggregatesFilter<"Admin"> | string
  profilePic?: Prisma.StringNullableWithAggregatesFilter<"Admin"> | string | null
  coverPic?: Prisma.StringNullableWithAggregatesFilter<"Admin"> | string | null
  isBlocked?: Prisma.BoolWithAggregatesFilter<"Admin"> | boolean
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Admin"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Admin"> | Date | string
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Admin"> | Date | string | null
}

export type AdminCreateInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}

export type AdminCreateManyInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
}

export type AdminUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AdminUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AdminCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  profilePic?: Prisma.SortOrder
  coverPic?: Prisma.SortOrder
  isBlocked?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdminMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  profilePic?: Prisma.SortOrder
  coverPic?: Prisma.SortOrder
  isBlocked?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdminMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  profilePic?: Prisma.SortOrder
  coverPic?: Prisma.SortOrder
  isBlocked?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdminNullableScalarRelationFilter = {
  is?: Prisma.AdminWhereInput | null
  isNot?: Prisma.AdminWhereInput | null
}

export type AdminCreateNestedOneWithoutAuditLogsInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutAuditLogsInput, Prisma.AdminUncheckedCreateWithoutAuditLogsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutAuditLogsInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutAuditLogsNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutAuditLogsInput, Prisma.AdminUncheckedCreateWithoutAuditLogsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutAuditLogsInput
  upsert?: Prisma.AdminUpsertWithoutAuditLogsInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutAuditLogsInput, Prisma.AdminUpdateWithoutAuditLogsInput>, Prisma.AdminUncheckedUpdateWithoutAuditLogsInput>
}

export type AdminCreateNestedOneWithoutConversationInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutConversationInput, Prisma.AdminUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutConversationInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutConversationNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutConversationInput, Prisma.AdminUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutConversationInput
  upsert?: Prisma.AdminUpsertWithoutConversationInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutConversationInput, Prisma.AdminUpdateWithoutConversationInput>, Prisma.AdminUncheckedUpdateWithoutConversationInput>
}

export type AdminCreateNestedOneWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutMessageInput, Prisma.AdminUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutMessageInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutMessageInput, Prisma.AdminUncheckedCreateWithoutMessageInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutMessageInput
  upsert?: Prisma.AdminUpsertWithoutMessageInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutMessageInput, Prisma.AdminUpdateWithoutMessageInput>, Prisma.AdminUncheckedUpdateWithoutMessageInput>
}

export type AdminCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutNotificationsInput, Prisma.AdminUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutNotificationsInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutNotificationsInput, Prisma.AdminUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutNotificationsInput
  upsert?: Prisma.AdminUpsertWithoutNotificationsInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutNotificationsInput, Prisma.AdminUpdateWithoutNotificationsInput>, Prisma.AdminUncheckedUpdateWithoutNotificationsInput>
}

export type AdminCreateNestedOneWithoutPostsInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutPostsInput, Prisma.AdminUncheckedCreateWithoutPostsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutPostsInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutPostsNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutPostsInput, Prisma.AdminUncheckedCreateWithoutPostsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutPostsInput
  upsert?: Prisma.AdminUpsertWithoutPostsInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutPostsInput, Prisma.AdminUpdateWithoutPostsInput>, Prisma.AdminUncheckedUpdateWithoutPostsInput>
}

export type AdminCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutCommentsInput, Prisma.AdminUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutCommentsInput
  connect?: Prisma.AdminWhereUniqueInput
}

export type AdminUpdateOneWithoutCommentsNestedInput = {
  create?: Prisma.XOR<Prisma.AdminCreateWithoutCommentsInput, Prisma.AdminUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.AdminCreateOrConnectWithoutCommentsInput
  upsert?: Prisma.AdminUpsertWithoutCommentsInput
  disconnect?: Prisma.AdminWhereInput | boolean
  delete?: Prisma.AdminWhereInput | boolean
  connect?: Prisma.AdminWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdminUpdateToOneWithWhereWithoutCommentsInput, Prisma.AdminUpdateWithoutCommentsInput>, Prisma.AdminUncheckedUpdateWithoutCommentsInput>
}

export type AdminCreateWithoutAuditLogsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateWithoutAuditLogsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminCreateOrConnectWithoutAuditLogsInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutAuditLogsInput, Prisma.AdminUncheckedCreateWithoutAuditLogsInput>
}

export type AdminUpsertWithoutAuditLogsInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutAuditLogsInput, Prisma.AdminUncheckedUpdateWithoutAuditLogsInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutAuditLogsInput, Prisma.AdminUncheckedCreateWithoutAuditLogsInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutAuditLogsInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutAuditLogsInput, Prisma.AdminUncheckedUpdateWithoutAuditLogsInput>
}

export type AdminUpdateWithoutAuditLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateWithoutAuditLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}

export type AdminCreateWithoutConversationInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateWithoutConversationInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminCreateOrConnectWithoutConversationInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutConversationInput, Prisma.AdminUncheckedCreateWithoutConversationInput>
}

export type AdminUpsertWithoutConversationInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutConversationInput, Prisma.AdminUncheckedUpdateWithoutConversationInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutConversationInput, Prisma.AdminUncheckedCreateWithoutConversationInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutConversationInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutConversationInput, Prisma.AdminUncheckedUpdateWithoutConversationInput>
}

export type AdminUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}

export type AdminCreateWithoutMessageInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateWithoutMessageInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminCreateOrConnectWithoutMessageInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutMessageInput, Prisma.AdminUncheckedCreateWithoutMessageInput>
}

export type AdminUpsertWithoutMessageInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutMessageInput, Prisma.AdminUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutMessageInput, Prisma.AdminUncheckedCreateWithoutMessageInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutMessageInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutMessageInput, Prisma.AdminUncheckedUpdateWithoutMessageInput>
}

export type AdminUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}

export type AdminCreateWithoutNotificationsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
}

export type AdminUncheckedCreateWithoutNotificationsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
}

export type AdminCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutNotificationsInput, Prisma.AdminUncheckedCreateWithoutNotificationsInput>
}

export type AdminUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutNotificationsInput, Prisma.AdminUncheckedUpdateWithoutNotificationsInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutNotificationsInput, Prisma.AdminUncheckedCreateWithoutNotificationsInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutNotificationsInput, Prisma.AdminUncheckedUpdateWithoutNotificationsInput>
}

export type AdminUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
}

export type AdminUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
}

export type AdminCreateWithoutPostsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  comments?: Prisma.CommentCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateWithoutPostsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminCreateOrConnectWithoutPostsInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutPostsInput, Prisma.AdminUncheckedCreateWithoutPostsInput>
}

export type AdminUpsertWithoutPostsInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutPostsInput, Prisma.AdminUncheckedUpdateWithoutPostsInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutPostsInput, Prisma.AdminUncheckedCreateWithoutPostsInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutPostsInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutPostsInput, Prisma.AdminUncheckedUpdateWithoutPostsInput>
}

export type AdminUpdateWithoutPostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comments?: Prisma.CommentUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateWithoutPostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comments?: Prisma.CommentUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}

export type AdminCreateWithoutCommentsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutAdminInput
}

export type AdminUncheckedCreateWithoutCommentsInput = {
  id?: string
  firstName: string
  lastName?: string | null
  email: string
  password: string
  profilePic?: string | null
  coverPic?: string | null
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string | null
  posts?: Prisma.PostUncheckedCreateNestedManyWithoutAdminInput
  auditLogs?: Prisma.AuditLogUncheckedCreateNestedManyWithoutAdminInput
  conversation?: Prisma.ConversationUncheckedCreateNestedManyWithoutCreatedByAdminInput
  message?: Prisma.MessageUncheckedCreateNestedManyWithoutSenderAdminInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutAdminInput
}

export type AdminCreateOrConnectWithoutCommentsInput = {
  where: Prisma.AdminWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminCreateWithoutCommentsInput, Prisma.AdminUncheckedCreateWithoutCommentsInput>
}

export type AdminUpsertWithoutCommentsInput = {
  update: Prisma.XOR<Prisma.AdminUpdateWithoutCommentsInput, Prisma.AdminUncheckedUpdateWithoutCommentsInput>
  create: Prisma.XOR<Prisma.AdminCreateWithoutCommentsInput, Prisma.AdminUncheckedCreateWithoutCommentsInput>
  where?: Prisma.AdminWhereInput
}

export type AdminUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.AdminWhereInput
  data: Prisma.XOR<Prisma.AdminUpdateWithoutCommentsInput, Prisma.AdminUncheckedUpdateWithoutCommentsInput>
}

export type AdminUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutAdminNestedInput
}

export type AdminUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  profilePic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coverPic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isBlocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  posts?: Prisma.PostUncheckedUpdateManyWithoutAdminNestedInput
  auditLogs?: Prisma.AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  conversation?: Prisma.ConversationUncheckedUpdateManyWithoutCreatedByAdminNestedInput
  message?: Prisma.MessageUncheckedUpdateManyWithoutSenderAdminNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutAdminNestedInput
}


/**
 * Count Type AdminCountOutputType
 */

export type AdminCountOutputType = {
  posts: number
  comments: number
  auditLogs: number
  conversation: number
  message: number
  notifications: number
}

export type AdminCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  posts?: boolean | AdminCountOutputTypeCountPostsArgs
  comments?: boolean | AdminCountOutputTypeCountCommentsArgs
  auditLogs?: boolean | AdminCountOutputTypeCountAuditLogsArgs
  conversation?: boolean | AdminCountOutputTypeCountConversationArgs
  message?: boolean | AdminCountOutputTypeCountMessageArgs
  notifications?: boolean | AdminCountOutputTypeCountNotificationsArgs
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminCountOutputType
   */
  select?: Prisma.AdminCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountPostsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostWhereInput
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountCommentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentWhereInput
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountAuditLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuditLogWhereInput
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountConversationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConversationWhereInput
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountMessageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageWhereInput
}

/**
 * AdminCountOutputType without action
 */
export type AdminCountOutputTypeCountNotificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationWhereInput
}


export type AdminSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  password?: boolean
  profilePic?: boolean
  coverPic?: boolean
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  posts?: boolean | Prisma.Admin$postsArgs<ExtArgs>
  comments?: boolean | Prisma.Admin$commentsArgs<ExtArgs>
  auditLogs?: boolean | Prisma.Admin$auditLogsArgs<ExtArgs>
  conversation?: boolean | Prisma.Admin$conversationArgs<ExtArgs>
  message?: boolean | Prisma.Admin$messageArgs<ExtArgs>
  notifications?: boolean | Prisma.Admin$notificationsArgs<ExtArgs>
  _count?: boolean | Prisma.AdminCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["admin"]>

export type AdminSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  password?: boolean
  profilePic?: boolean
  coverPic?: boolean
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["admin"]>

export type AdminSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  password?: boolean
  profilePic?: boolean
  coverPic?: boolean
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["admin"]>

export type AdminSelectScalar = {
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  password?: boolean
  profilePic?: boolean
  coverPic?: boolean
  isBlocked?: boolean
  isDeleted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AdminOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "password" | "profilePic" | "coverPic" | "isBlocked" | "isDeleted" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>
export type AdminInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  posts?: boolean | Prisma.Admin$postsArgs<ExtArgs>
  comments?: boolean | Prisma.Admin$commentsArgs<ExtArgs>
  auditLogs?: boolean | Prisma.Admin$auditLogsArgs<ExtArgs>
  conversation?: boolean | Prisma.Admin$conversationArgs<ExtArgs>
  message?: boolean | Prisma.Admin$messageArgs<ExtArgs>
  notifications?: boolean | Prisma.Admin$notificationsArgs<ExtArgs>
  _count?: boolean | Prisma.AdminCountOutputTypeDefaultArgs<ExtArgs>
}
export type AdminIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AdminIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AdminPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Admin"
  objects: {
    posts: Prisma.$PostPayload<ExtArgs>[]
    comments: Prisma.$CommentPayload<ExtArgs>[]
    auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    conversation: Prisma.$ConversationPayload<ExtArgs>[]
    message: Prisma.$MessagePayload<ExtArgs>[]
    notifications: Prisma.$NotificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    firstName: string
    lastName: string | null
    email: string
    password: string
    profilePic: string | null
    coverPic: string | null
    isBlocked: boolean
    isDeleted: boolean
    createdAt: Date
    updatedAt: Date | null
  }, ExtArgs["result"]["admin"]>
  composites: {}
}

export type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdminPayload, S>

export type AdminCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdminCountAggregateInputType | true
  }

export interface AdminDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
  /**
   * Find zero or one Admin that matches the filter.
   * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
   * @example
   * // Get one Admin
   * const admin = await prisma.admin.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdminFindUniqueArgs>(args: Prisma.SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
   * @example
   * // Get one Admin
   * const admin = await prisma.admin.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Admin that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminFindFirstArgs} args - Arguments to find a Admin
   * @example
   * // Get one Admin
   * const admin = await prisma.admin.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdminFindFirstArgs>(args?: Prisma.SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Admin that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
   * @example
   * // Get one Admin
   * const admin = await prisma.admin.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Admins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Admins
   * const admins = await prisma.admin.findMany()
   * 
   * // Get first 10 Admins
   * const admins = await prisma.admin.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdminFindManyArgs>(args?: Prisma.SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Admin.
   * @param {AdminCreateArgs} args - Arguments to create a Admin.
   * @example
   * // Create one Admin
   * const Admin = await prisma.admin.create({
   *   data: {
   *     // ... data to create a Admin
   *   }
   * })
   * 
   */
  create<T extends AdminCreateArgs>(args: Prisma.SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Admins.
   * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
   * @example
   * // Create many Admins
   * const admin = await prisma.admin.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdminCreateManyArgs>(args?: Prisma.SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Admins and returns the data saved in the database.
   * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
   * @example
   * // Create many Admins
   * const admin = await prisma.admin.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Admins and only return the `id`
   * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Admin.
   * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
   * @example
   * // Delete one Admin
   * const Admin = await prisma.admin.delete({
   *   where: {
   *     // ... filter to delete one Admin
   *   }
   * })
   * 
   */
  delete<T extends AdminDeleteArgs>(args: Prisma.SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Admin.
   * @param {AdminUpdateArgs} args - Arguments to update one Admin.
   * @example
   * // Update one Admin
   * const admin = await prisma.admin.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdminUpdateArgs>(args: Prisma.SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Admins.
   * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
   * @example
   * // Delete a few Admins
   * const { count } = await prisma.admin.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdminDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Admins
   * const admin = await prisma.admin.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdminUpdateManyArgs>(args: Prisma.SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Admins and returns the data updated in the database.
   * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
   * @example
   * // Update many Admins
   * const admin = await prisma.admin.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Admins and only return the `id`
   * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Admin.
   * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
   * @example
   * // Update or create a Admin
   * const admin = await prisma.admin.upsert({
   *   create: {
   *     // ... data to create a Admin
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Admin we want to update
   *   }
   * })
   */
  upsert<T extends AdminUpsertArgs>(args: Prisma.SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma.Prisma__AdminClient<runtime.Types.Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminCountArgs} args - Arguments to filter Admins to count.
   * @example
   * // Count the number of Admins
   * const count = await prisma.admin.count({
   *   where: {
   *     // ... the filter for the Admins we want to count
   *   }
   * })
  **/
  count<T extends AdminCountArgs>(
    args?: Prisma.Subset<T, AdminCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdminCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Admin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdminAggregateArgs>(args: Prisma.Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

  /**
   * Group by Admin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdminGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdminGroupByArgs['orderBy'] }
      : { orderBy?: AdminGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Admin model
 */
readonly fields: AdminFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Admin.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdminClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  posts<T extends Prisma.Admin$postsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$postsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  comments<T extends Prisma.Admin$commentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  auditLogs<T extends Prisma.Admin$auditLogsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  conversation<T extends Prisma.Admin$conversationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$conversationArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  message<T extends Prisma.Admin$messageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$messageArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notifications<T extends Prisma.Admin$notificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Admin$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Admin model
 */
export interface AdminFieldRefs {
  readonly id: Prisma.FieldRef<"Admin", 'String'>
  readonly firstName: Prisma.FieldRef<"Admin", 'String'>
  readonly lastName: Prisma.FieldRef<"Admin", 'String'>
  readonly email: Prisma.FieldRef<"Admin", 'String'>
  readonly password: Prisma.FieldRef<"Admin", 'String'>
  readonly profilePic: Prisma.FieldRef<"Admin", 'String'>
  readonly coverPic: Prisma.FieldRef<"Admin", 'String'>
  readonly isBlocked: Prisma.FieldRef<"Admin", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"Admin", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Admin", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Admin", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Admin findUnique
 */
export type AdminFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter, which Admin to fetch.
   */
  where: Prisma.AdminWhereUniqueInput
}

/**
 * Admin findUniqueOrThrow
 */
export type AdminFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter, which Admin to fetch.
   */
  where: Prisma.AdminWhereUniqueInput
}

/**
 * Admin findFirst
 */
export type AdminFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter, which Admin to fetch.
   */
  where?: Prisma.AdminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminOrderByWithRelationInput | Prisma.AdminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Admins.
   */
  cursor?: Prisma.AdminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Admins.
   */
  distinct?: Prisma.AdminScalarFieldEnum | Prisma.AdminScalarFieldEnum[]
}

/**
 * Admin findFirstOrThrow
 */
export type AdminFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter, which Admin to fetch.
   */
  where?: Prisma.AdminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminOrderByWithRelationInput | Prisma.AdminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Admins.
   */
  cursor?: Prisma.AdminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Admins.
   */
  distinct?: Prisma.AdminScalarFieldEnum | Prisma.AdminScalarFieldEnum[]
}

/**
 * Admin findMany
 */
export type AdminFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where?: Prisma.AdminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminOrderByWithRelationInput | Prisma.AdminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Admins.
   */
  cursor?: Prisma.AdminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  distinct?: Prisma.AdminScalarFieldEnum | Prisma.AdminScalarFieldEnum[]
}

/**
 * Admin create
 */
export type AdminCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * The data needed to create a Admin.
   */
  data: Prisma.XOR<Prisma.AdminCreateInput, Prisma.AdminUncheckedCreateInput>
}

/**
 * Admin createMany
 */
export type AdminCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Admins.
   */
  data: Prisma.AdminCreateManyInput | Prisma.AdminCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Admin createManyAndReturn
 */
export type AdminCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * The data used to create many Admins.
   */
  data: Prisma.AdminCreateManyInput | Prisma.AdminCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Admin update
 */
export type AdminUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * The data needed to update a Admin.
   */
  data: Prisma.XOR<Prisma.AdminUpdateInput, Prisma.AdminUncheckedUpdateInput>
  /**
   * Choose, which Admin to update.
   */
  where: Prisma.AdminWhereUniqueInput
}

/**
 * Admin updateMany
 */
export type AdminUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Admins.
   */
  data: Prisma.XOR<Prisma.AdminUpdateManyMutationInput, Prisma.AdminUncheckedUpdateManyInput>
  /**
   * Filter which Admins to update
   */
  where?: Prisma.AdminWhereInput
  /**
   * Limit how many Admins to update.
   */
  limit?: number
}

/**
 * Admin updateManyAndReturn
 */
export type AdminUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * The data used to update Admins.
   */
  data: Prisma.XOR<Prisma.AdminUpdateManyMutationInput, Prisma.AdminUncheckedUpdateManyInput>
  /**
   * Filter which Admins to update
   */
  where?: Prisma.AdminWhereInput
  /**
   * Limit how many Admins to update.
   */
  limit?: number
}

/**
 * Admin upsert
 */
export type AdminUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * The filter to search for the Admin to update in case it exists.
   */
  where: Prisma.AdminWhereUniqueInput
  /**
   * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
   */
  create: Prisma.XOR<Prisma.AdminCreateInput, Prisma.AdminUncheckedCreateInput>
  /**
   * In case the Admin was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdminUpdateInput, Prisma.AdminUncheckedUpdateInput>
}

/**
 * Admin delete
 */
export type AdminDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
  /**
   * Filter which Admin to delete.
   */
  where: Prisma.AdminWhereUniqueInput
}

/**
 * Admin deleteMany
 */
export type AdminDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Admins to delete
   */
  where?: Prisma.AdminWhereInput
  /**
   * Limit how many Admins to delete.
   */
  limit?: number
}

/**
 * Admin.posts
 */
export type Admin$postsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Post
   */
  select?: Prisma.PostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Post
   */
  omit?: Prisma.PostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostInclude<ExtArgs> | null
  where?: Prisma.PostWhereInput
  orderBy?: Prisma.PostOrderByWithRelationInput | Prisma.PostOrderByWithRelationInput[]
  cursor?: Prisma.PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PostScalarFieldEnum | Prisma.PostScalarFieldEnum[]
}

/**
 * Admin.comments
 */
export type Admin$commentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  where?: Prisma.CommentWhereInput
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  cursor?: Prisma.CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Admin.auditLogs
 */
export type Admin$auditLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AuditLog
   */
  select?: Prisma.AuditLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AuditLog
   */
  omit?: Prisma.AuditLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuditLogInclude<ExtArgs> | null
  where?: Prisma.AuditLogWhereInput
  orderBy?: Prisma.AuditLogOrderByWithRelationInput | Prisma.AuditLogOrderByWithRelationInput[]
  cursor?: Prisma.AuditLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AuditLogScalarFieldEnum | Prisma.AuditLogScalarFieldEnum[]
}

/**
 * Admin.conversation
 */
export type Admin$conversationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Conversation
   */
  select?: Prisma.ConversationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Conversation
   */
  omit?: Prisma.ConversationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationInclude<ExtArgs> | null
  where?: Prisma.ConversationWhereInput
  orderBy?: Prisma.ConversationOrderByWithRelationInput | Prisma.ConversationOrderByWithRelationInput[]
  cursor?: Prisma.ConversationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ConversationScalarFieldEnum | Prisma.ConversationScalarFieldEnum[]
}

/**
 * Admin.message
 */
export type Admin$messageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Message
   */
  select?: Prisma.MessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Message
   */
  omit?: Prisma.MessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageInclude<ExtArgs> | null
  where?: Prisma.MessageWhereInput
  orderBy?: Prisma.MessageOrderByWithRelationInput | Prisma.MessageOrderByWithRelationInput[]
  cursor?: Prisma.MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MessageScalarFieldEnum | Prisma.MessageScalarFieldEnum[]
}

/**
 * Admin.notifications
 */
export type Admin$notificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null
  where?: Prisma.NotificationWhereInput
  orderBy?: Prisma.NotificationOrderByWithRelationInput | Prisma.NotificationOrderByWithRelationInput[]
  cursor?: Prisma.NotificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationScalarFieldEnum | Prisma.NotificationScalarFieldEnum[]
}

/**
 * Admin without action
 */
export type AdminDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admin
   */
  select?: Prisma.AdminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admin
   */
  omit?: Prisma.AdminOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminInclude<ExtArgs> | null
}
