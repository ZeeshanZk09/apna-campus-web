
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ParentChild` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ParentChild
 * 
 */
export type ParentChildModel = runtime.Types.Result.DefaultSelection<Prisma.$ParentChildPayload>

export type AggregateParentChild = {
  _count: ParentChildCountAggregateOutputType | null
  _min: ParentChildMinAggregateOutputType | null
  _max: ParentChildMaxAggregateOutputType | null
}

export type ParentChildMinAggregateOutputType = {
  id: string | null
  parentId: string | null
  childId: string | null
  relation: string | null
  createdAt: Date | null
}

export type ParentChildMaxAggregateOutputType = {
  id: string | null
  parentId: string | null
  childId: string | null
  relation: string | null
  createdAt: Date | null
}

export type ParentChildCountAggregateOutputType = {
  id: number
  parentId: number
  childId: number
  relation: number
  createdAt: number
  _all: number
}


export type ParentChildMinAggregateInputType = {
  id?: true
  parentId?: true
  childId?: true
  relation?: true
  createdAt?: true
}

export type ParentChildMaxAggregateInputType = {
  id?: true
  parentId?: true
  childId?: true
  relation?: true
  createdAt?: true
}

export type ParentChildCountAggregateInputType = {
  id?: true
  parentId?: true
  childId?: true
  relation?: true
  createdAt?: true
  _all?: true
}

export type ParentChildAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParentChild to aggregate.
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentChildren to fetch.
   */
  orderBy?: Prisma.ParentChildOrderByWithRelationInput | Prisma.ParentChildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ParentChildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentChildren from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentChildren.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ParentChildren
  **/
  _count?: true | ParentChildCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ParentChildMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ParentChildMaxAggregateInputType
}

export type GetParentChildAggregateType<T extends ParentChildAggregateArgs> = {
      [P in keyof T & keyof AggregateParentChild]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateParentChild[P]>
    : Prisma.GetScalarType<T[P], AggregateParentChild[P]>
}




export type ParentChildGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ParentChildWhereInput
  orderBy?: Prisma.ParentChildOrderByWithAggregationInput | Prisma.ParentChildOrderByWithAggregationInput[]
  by: Prisma.ParentChildScalarFieldEnum[] | Prisma.ParentChildScalarFieldEnum
  having?: Prisma.ParentChildScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ParentChildCountAggregateInputType | true
  _min?: ParentChildMinAggregateInputType
  _max?: ParentChildMaxAggregateInputType
}

export type ParentChildGroupByOutputType = {
  id: string
  parentId: string
  childId: string
  relation: string | null
  createdAt: Date
  _count: ParentChildCountAggregateOutputType | null
  _min: ParentChildMinAggregateOutputType | null
  _max: ParentChildMaxAggregateOutputType | null
}

type GetParentChildGroupByPayload<T extends ParentChildGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ParentChildGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ParentChildGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ParentChildGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ParentChildGroupByOutputType[P]>
      }
    >
  >



export type ParentChildWhereInput = {
  AND?: Prisma.ParentChildWhereInput | Prisma.ParentChildWhereInput[]
  OR?: Prisma.ParentChildWhereInput[]
  NOT?: Prisma.ParentChildWhereInput | Prisma.ParentChildWhereInput[]
  id?: Prisma.UuidFilter<"ParentChild"> | string
  parentId?: Prisma.UuidFilter<"ParentChild"> | string
  childId?: Prisma.UuidFilter<"ParentChild"> | string
  relation?: Prisma.StringNullableFilter<"ParentChild"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ParentChild"> | Date | string
  parent?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  child?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ParentChildOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  childId?: Prisma.SortOrder
  relation?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  parent?: Prisma.UserOrderByWithRelationInput
  child?: Prisma.UserOrderByWithRelationInput
}

export type ParentChildWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  parentId_childId?: Prisma.ParentChildParentIdChildIdCompoundUniqueInput
  AND?: Prisma.ParentChildWhereInput | Prisma.ParentChildWhereInput[]
  OR?: Prisma.ParentChildWhereInput[]
  NOT?: Prisma.ParentChildWhereInput | Prisma.ParentChildWhereInput[]
  parentId?: Prisma.UuidFilter<"ParentChild"> | string
  childId?: Prisma.UuidFilter<"ParentChild"> | string
  relation?: Prisma.StringNullableFilter<"ParentChild"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ParentChild"> | Date | string
  parent?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  child?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "parentId_childId">

export type ParentChildOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  childId?: Prisma.SortOrder
  relation?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ParentChildCountOrderByAggregateInput
  _max?: Prisma.ParentChildMaxOrderByAggregateInput
  _min?: Prisma.ParentChildMinOrderByAggregateInput
}

export type ParentChildScalarWhereWithAggregatesInput = {
  AND?: Prisma.ParentChildScalarWhereWithAggregatesInput | Prisma.ParentChildScalarWhereWithAggregatesInput[]
  OR?: Prisma.ParentChildScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ParentChildScalarWhereWithAggregatesInput | Prisma.ParentChildScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ParentChild"> | string
  parentId?: Prisma.UuidWithAggregatesFilter<"ParentChild"> | string
  childId?: Prisma.UuidWithAggregatesFilter<"ParentChild"> | string
  relation?: Prisma.StringNullableWithAggregatesFilter<"ParentChild"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ParentChild"> | Date | string
}

export type ParentChildCreateInput = {
  id?: string
  relation?: string | null
  createdAt?: Date | string
  parent: Prisma.UserCreateNestedOneWithoutParentChildrenInput
  child: Prisma.UserCreateNestedOneWithoutChildParentsInput
}

export type ParentChildUncheckedCreateInput = {
  id?: string
  parentId: string
  childId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.UserUpdateOneRequiredWithoutParentChildrenNestedInput
  child?: Prisma.UserUpdateOneRequiredWithoutChildParentsNestedInput
}

export type ParentChildUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  childId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildCreateManyInput = {
  id?: string
  parentId: string
  childId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  childId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildListRelationFilter = {
  every?: Prisma.ParentChildWhereInput
  some?: Prisma.ParentChildWhereInput
  none?: Prisma.ParentChildWhereInput
}

export type ParentChildOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ParentChildParentIdChildIdCompoundUniqueInput = {
  parentId: string
  childId: string
}

export type ParentChildCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  childId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ParentChildMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  childId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ParentChildMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  childId?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ParentChildCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput> | Prisma.ParentChildCreateWithoutParentInput[] | Prisma.ParentChildUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutParentInput | Prisma.ParentChildCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ParentChildCreateManyParentInputEnvelope
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
}

export type ParentChildCreateNestedManyWithoutChildInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput> | Prisma.ParentChildCreateWithoutChildInput[] | Prisma.ParentChildUncheckedCreateWithoutChildInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutChildInput | Prisma.ParentChildCreateOrConnectWithoutChildInput[]
  createMany?: Prisma.ParentChildCreateManyChildInputEnvelope
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
}

export type ParentChildUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput> | Prisma.ParentChildCreateWithoutParentInput[] | Prisma.ParentChildUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutParentInput | Prisma.ParentChildCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ParentChildCreateManyParentInputEnvelope
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
}

export type ParentChildUncheckedCreateNestedManyWithoutChildInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput> | Prisma.ParentChildCreateWithoutChildInput[] | Prisma.ParentChildUncheckedCreateWithoutChildInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutChildInput | Prisma.ParentChildCreateOrConnectWithoutChildInput[]
  createMany?: Prisma.ParentChildCreateManyChildInputEnvelope
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
}

export type ParentChildUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput> | Prisma.ParentChildCreateWithoutParentInput[] | Prisma.ParentChildUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutParentInput | Prisma.ParentChildCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ParentChildUpsertWithWhereUniqueWithoutParentInput | Prisma.ParentChildUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ParentChildCreateManyParentInputEnvelope
  set?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  disconnect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  delete?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  update?: Prisma.ParentChildUpdateWithWhereUniqueWithoutParentInput | Prisma.ParentChildUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ParentChildUpdateManyWithWhereWithoutParentInput | Prisma.ParentChildUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
}

export type ParentChildUpdateManyWithoutChildNestedInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput> | Prisma.ParentChildCreateWithoutChildInput[] | Prisma.ParentChildUncheckedCreateWithoutChildInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutChildInput | Prisma.ParentChildCreateOrConnectWithoutChildInput[]
  upsert?: Prisma.ParentChildUpsertWithWhereUniqueWithoutChildInput | Prisma.ParentChildUpsertWithWhereUniqueWithoutChildInput[]
  createMany?: Prisma.ParentChildCreateManyChildInputEnvelope
  set?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  disconnect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  delete?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  update?: Prisma.ParentChildUpdateWithWhereUniqueWithoutChildInput | Prisma.ParentChildUpdateWithWhereUniqueWithoutChildInput[]
  updateMany?: Prisma.ParentChildUpdateManyWithWhereWithoutChildInput | Prisma.ParentChildUpdateManyWithWhereWithoutChildInput[]
  deleteMany?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
}

export type ParentChildUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput> | Prisma.ParentChildCreateWithoutParentInput[] | Prisma.ParentChildUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutParentInput | Prisma.ParentChildCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ParentChildUpsertWithWhereUniqueWithoutParentInput | Prisma.ParentChildUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ParentChildCreateManyParentInputEnvelope
  set?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  disconnect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  delete?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  update?: Prisma.ParentChildUpdateWithWhereUniqueWithoutParentInput | Prisma.ParentChildUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ParentChildUpdateManyWithWhereWithoutParentInput | Prisma.ParentChildUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
}

export type ParentChildUncheckedUpdateManyWithoutChildNestedInput = {
  create?: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput> | Prisma.ParentChildCreateWithoutChildInput[] | Prisma.ParentChildUncheckedCreateWithoutChildInput[]
  connectOrCreate?: Prisma.ParentChildCreateOrConnectWithoutChildInput | Prisma.ParentChildCreateOrConnectWithoutChildInput[]
  upsert?: Prisma.ParentChildUpsertWithWhereUniqueWithoutChildInput | Prisma.ParentChildUpsertWithWhereUniqueWithoutChildInput[]
  createMany?: Prisma.ParentChildCreateManyChildInputEnvelope
  set?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  disconnect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  delete?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  connect?: Prisma.ParentChildWhereUniqueInput | Prisma.ParentChildWhereUniqueInput[]
  update?: Prisma.ParentChildUpdateWithWhereUniqueWithoutChildInput | Prisma.ParentChildUpdateWithWhereUniqueWithoutChildInput[]
  updateMany?: Prisma.ParentChildUpdateManyWithWhereWithoutChildInput | Prisma.ParentChildUpdateManyWithWhereWithoutChildInput[]
  deleteMany?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
}

export type ParentChildCreateWithoutParentInput = {
  id?: string
  relation?: string | null
  createdAt?: Date | string
  child: Prisma.UserCreateNestedOneWithoutChildParentsInput
}

export type ParentChildUncheckedCreateWithoutParentInput = {
  id?: string
  childId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildCreateOrConnectWithoutParentInput = {
  where: Prisma.ParentChildWhereUniqueInput
  create: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput>
}

export type ParentChildCreateManyParentInputEnvelope = {
  data: Prisma.ParentChildCreateManyParentInput | Prisma.ParentChildCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type ParentChildCreateWithoutChildInput = {
  id?: string
  relation?: string | null
  createdAt?: Date | string
  parent: Prisma.UserCreateNestedOneWithoutParentChildrenInput
}

export type ParentChildUncheckedCreateWithoutChildInput = {
  id?: string
  parentId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildCreateOrConnectWithoutChildInput = {
  where: Prisma.ParentChildWhereUniqueInput
  create: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput>
}

export type ParentChildCreateManyChildInputEnvelope = {
  data: Prisma.ParentChildCreateManyChildInput | Prisma.ParentChildCreateManyChildInput[]
  skipDuplicates?: boolean
}

export type ParentChildUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.ParentChildWhereUniqueInput
  update: Prisma.XOR<Prisma.ParentChildUpdateWithoutParentInput, Prisma.ParentChildUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.ParentChildCreateWithoutParentInput, Prisma.ParentChildUncheckedCreateWithoutParentInput>
}

export type ParentChildUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.ParentChildWhereUniqueInput
  data: Prisma.XOR<Prisma.ParentChildUpdateWithoutParentInput, Prisma.ParentChildUncheckedUpdateWithoutParentInput>
}

export type ParentChildUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.ParentChildScalarWhereInput
  data: Prisma.XOR<Prisma.ParentChildUpdateManyMutationInput, Prisma.ParentChildUncheckedUpdateManyWithoutParentInput>
}

export type ParentChildScalarWhereInput = {
  AND?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
  OR?: Prisma.ParentChildScalarWhereInput[]
  NOT?: Prisma.ParentChildScalarWhereInput | Prisma.ParentChildScalarWhereInput[]
  id?: Prisma.UuidFilter<"ParentChild"> | string
  parentId?: Prisma.UuidFilter<"ParentChild"> | string
  childId?: Prisma.UuidFilter<"ParentChild"> | string
  relation?: Prisma.StringNullableFilter<"ParentChild"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ParentChild"> | Date | string
}

export type ParentChildUpsertWithWhereUniqueWithoutChildInput = {
  where: Prisma.ParentChildWhereUniqueInput
  update: Prisma.XOR<Prisma.ParentChildUpdateWithoutChildInput, Prisma.ParentChildUncheckedUpdateWithoutChildInput>
  create: Prisma.XOR<Prisma.ParentChildCreateWithoutChildInput, Prisma.ParentChildUncheckedCreateWithoutChildInput>
}

export type ParentChildUpdateWithWhereUniqueWithoutChildInput = {
  where: Prisma.ParentChildWhereUniqueInput
  data: Prisma.XOR<Prisma.ParentChildUpdateWithoutChildInput, Prisma.ParentChildUncheckedUpdateWithoutChildInput>
}

export type ParentChildUpdateManyWithWhereWithoutChildInput = {
  where: Prisma.ParentChildScalarWhereInput
  data: Prisma.XOR<Prisma.ParentChildUpdateManyMutationInput, Prisma.ParentChildUncheckedUpdateManyWithoutChildInput>
}

export type ParentChildCreateManyParentInput = {
  id?: string
  childId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildCreateManyChildInput = {
  id?: string
  parentId: string
  relation?: string | null
  createdAt?: Date | string
}

export type ParentChildUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  child?: Prisma.UserUpdateOneRequiredWithoutChildParentsNestedInput
}

export type ParentChildUncheckedUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  childId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildUncheckedUpdateManyWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  childId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildUpdateWithoutChildInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.UserUpdateOneRequiredWithoutParentChildrenNestedInput
}

export type ParentChildUncheckedUpdateWithoutChildInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParentChildUncheckedUpdateManyWithoutChildInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.StringFieldUpdateOperationsInput | string
  relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ParentChildSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  parentId?: boolean
  childId?: boolean
  relation?: boolean
  createdAt?: boolean
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentChild"]>

export type ParentChildSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  parentId?: boolean
  childId?: boolean
  relation?: boolean
  createdAt?: boolean
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentChild"]>

export type ParentChildSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  parentId?: boolean
  childId?: boolean
  relation?: boolean
  createdAt?: boolean
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["parentChild"]>

export type ParentChildSelectScalar = {
  id?: boolean
  parentId?: boolean
  childId?: boolean
  relation?: boolean
  createdAt?: boolean
}

export type ParentChildOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "parentId" | "childId" | "relation" | "createdAt", ExtArgs["result"]["parentChild"]>
export type ParentChildInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ParentChildIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ParentChildIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  child?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ParentChildPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ParentChild"
  objects: {
    parent: Prisma.$UserPayload<ExtArgs>
    child: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    parentId: string
    childId: string
    relation: string | null
    createdAt: Date
  }, ExtArgs["result"]["parentChild"]>
  composites: {}
}

export type ParentChildGetPayload<S extends boolean | null | undefined | ParentChildDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ParentChildPayload, S>

export type ParentChildCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ParentChildFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ParentChildCountAggregateInputType | true
  }

export interface ParentChildDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParentChild'], meta: { name: 'ParentChild' } }
  /**
   * Find zero or one ParentChild that matches the filter.
   * @param {ParentChildFindUniqueArgs} args - Arguments to find a ParentChild
   * @example
   * // Get one ParentChild
   * const parentChild = await prisma.parentChild.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ParentChildFindUniqueArgs>(args: Prisma.SelectSubset<T, ParentChildFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ParentChild that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ParentChildFindUniqueOrThrowArgs} args - Arguments to find a ParentChild
   * @example
   * // Get one ParentChild
   * const parentChild = await prisma.parentChild.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ParentChildFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ParentChildFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParentChild that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildFindFirstArgs} args - Arguments to find a ParentChild
   * @example
   * // Get one ParentChild
   * const parentChild = await prisma.parentChild.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ParentChildFindFirstArgs>(args?: Prisma.SelectSubset<T, ParentChildFindFirstArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParentChild that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildFindFirstOrThrowArgs} args - Arguments to find a ParentChild
   * @example
   * // Get one ParentChild
   * const parentChild = await prisma.parentChild.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ParentChildFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ParentChildFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ParentChildren that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ParentChildren
   * const parentChildren = await prisma.parentChild.findMany()
   * 
   * // Get first 10 ParentChildren
   * const parentChildren = await prisma.parentChild.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const parentChildWithIdOnly = await prisma.parentChild.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ParentChildFindManyArgs>(args?: Prisma.SelectSubset<T, ParentChildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ParentChild.
   * @param {ParentChildCreateArgs} args - Arguments to create a ParentChild.
   * @example
   * // Create one ParentChild
   * const ParentChild = await prisma.parentChild.create({
   *   data: {
   *     // ... data to create a ParentChild
   *   }
   * })
   * 
   */
  create<T extends ParentChildCreateArgs>(args: Prisma.SelectSubset<T, ParentChildCreateArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ParentChildren.
   * @param {ParentChildCreateManyArgs} args - Arguments to create many ParentChildren.
   * @example
   * // Create many ParentChildren
   * const parentChild = await prisma.parentChild.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ParentChildCreateManyArgs>(args?: Prisma.SelectSubset<T, ParentChildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ParentChildren and returns the data saved in the database.
   * @param {ParentChildCreateManyAndReturnArgs} args - Arguments to create many ParentChildren.
   * @example
   * // Create many ParentChildren
   * const parentChild = await prisma.parentChild.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ParentChildren and only return the `id`
   * const parentChildWithIdOnly = await prisma.parentChild.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ParentChildCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ParentChildCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ParentChild.
   * @param {ParentChildDeleteArgs} args - Arguments to delete one ParentChild.
   * @example
   * // Delete one ParentChild
   * const ParentChild = await prisma.parentChild.delete({
   *   where: {
   *     // ... filter to delete one ParentChild
   *   }
   * })
   * 
   */
  delete<T extends ParentChildDeleteArgs>(args: Prisma.SelectSubset<T, ParentChildDeleteArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ParentChild.
   * @param {ParentChildUpdateArgs} args - Arguments to update one ParentChild.
   * @example
   * // Update one ParentChild
   * const parentChild = await prisma.parentChild.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ParentChildUpdateArgs>(args: Prisma.SelectSubset<T, ParentChildUpdateArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ParentChildren.
   * @param {ParentChildDeleteManyArgs} args - Arguments to filter ParentChildren to delete.
   * @example
   * // Delete a few ParentChildren
   * const { count } = await prisma.parentChild.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ParentChildDeleteManyArgs>(args?: Prisma.SelectSubset<T, ParentChildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ParentChildren.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ParentChildren
   * const parentChild = await prisma.parentChild.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ParentChildUpdateManyArgs>(args: Prisma.SelectSubset<T, ParentChildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ParentChildren and returns the data updated in the database.
   * @param {ParentChildUpdateManyAndReturnArgs} args - Arguments to update many ParentChildren.
   * @example
   * // Update many ParentChildren
   * const parentChild = await prisma.parentChild.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ParentChildren and only return the `id`
   * const parentChildWithIdOnly = await prisma.parentChild.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ParentChildUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ParentChildUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ParentChild.
   * @param {ParentChildUpsertArgs} args - Arguments to update or create a ParentChild.
   * @example
   * // Update or create a ParentChild
   * const parentChild = await prisma.parentChild.upsert({
   *   create: {
   *     // ... data to create a ParentChild
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ParentChild we want to update
   *   }
   * })
   */
  upsert<T extends ParentChildUpsertArgs>(args: Prisma.SelectSubset<T, ParentChildUpsertArgs<ExtArgs>>): Prisma.Prisma__ParentChildClient<runtime.Types.Result.GetResult<Prisma.$ParentChildPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ParentChildren.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildCountArgs} args - Arguments to filter ParentChildren to count.
   * @example
   * // Count the number of ParentChildren
   * const count = await prisma.parentChild.count({
   *   where: {
   *     // ... the filter for the ParentChildren we want to count
   *   }
   * })
  **/
  count<T extends ParentChildCountArgs>(
    args?: Prisma.Subset<T, ParentChildCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ParentChildCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ParentChild.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ParentChildAggregateArgs>(args: Prisma.Subset<T, ParentChildAggregateArgs>): Prisma.PrismaPromise<GetParentChildAggregateType<T>>

  /**
   * Group by ParentChild.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParentChildGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ParentChildGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ParentChildGroupByArgs['orderBy'] }
      : { orderBy?: ParentChildGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ParentChildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentChildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ParentChild model
 */
readonly fields: ParentChildFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ParentChild.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ParentChildClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  parent<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  child<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ParentChild model
 */
export interface ParentChildFieldRefs {
  readonly id: Prisma.FieldRef<"ParentChild", 'String'>
  readonly parentId: Prisma.FieldRef<"ParentChild", 'String'>
  readonly childId: Prisma.FieldRef<"ParentChild", 'String'>
  readonly relation: Prisma.FieldRef<"ParentChild", 'String'>
  readonly createdAt: Prisma.FieldRef<"ParentChild", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ParentChild findUnique
 */
export type ParentChildFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter, which ParentChild to fetch.
   */
  where: Prisma.ParentChildWhereUniqueInput
}

/**
 * ParentChild findUniqueOrThrow
 */
export type ParentChildFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter, which ParentChild to fetch.
   */
  where: Prisma.ParentChildWhereUniqueInput
}

/**
 * ParentChild findFirst
 */
export type ParentChildFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter, which ParentChild to fetch.
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentChildren to fetch.
   */
  orderBy?: Prisma.ParentChildOrderByWithRelationInput | Prisma.ParentChildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParentChildren.
   */
  cursor?: Prisma.ParentChildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentChildren from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentChildren.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParentChildren.
   */
  distinct?: Prisma.ParentChildScalarFieldEnum | Prisma.ParentChildScalarFieldEnum[]
}

/**
 * ParentChild findFirstOrThrow
 */
export type ParentChildFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter, which ParentChild to fetch.
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentChildren to fetch.
   */
  orderBy?: Prisma.ParentChildOrderByWithRelationInput | Prisma.ParentChildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParentChildren.
   */
  cursor?: Prisma.ParentChildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentChildren from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentChildren.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParentChildren.
   */
  distinct?: Prisma.ParentChildScalarFieldEnum | Prisma.ParentChildScalarFieldEnum[]
}

/**
 * ParentChild findMany
 */
export type ParentChildFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter, which ParentChildren to fetch.
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParentChildren to fetch.
   */
  orderBy?: Prisma.ParentChildOrderByWithRelationInput | Prisma.ParentChildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ParentChildren.
   */
  cursor?: Prisma.ParentChildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParentChildren from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParentChildren.
   */
  skip?: number
  distinct?: Prisma.ParentChildScalarFieldEnum | Prisma.ParentChildScalarFieldEnum[]
}

/**
 * ParentChild create
 */
export type ParentChildCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * The data needed to create a ParentChild.
   */
  data: Prisma.XOR<Prisma.ParentChildCreateInput, Prisma.ParentChildUncheckedCreateInput>
}

/**
 * ParentChild createMany
 */
export type ParentChildCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ParentChildren.
   */
  data: Prisma.ParentChildCreateManyInput | Prisma.ParentChildCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ParentChild createManyAndReturn
 */
export type ParentChildCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * The data used to create many ParentChildren.
   */
  data: Prisma.ParentChildCreateManyInput | Prisma.ParentChildCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ParentChild update
 */
export type ParentChildUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * The data needed to update a ParentChild.
   */
  data: Prisma.XOR<Prisma.ParentChildUpdateInput, Prisma.ParentChildUncheckedUpdateInput>
  /**
   * Choose, which ParentChild to update.
   */
  where: Prisma.ParentChildWhereUniqueInput
}

/**
 * ParentChild updateMany
 */
export type ParentChildUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ParentChildren.
   */
  data: Prisma.XOR<Prisma.ParentChildUpdateManyMutationInput, Prisma.ParentChildUncheckedUpdateManyInput>
  /**
   * Filter which ParentChildren to update
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * Limit how many ParentChildren to update.
   */
  limit?: number
}

/**
 * ParentChild updateManyAndReturn
 */
export type ParentChildUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * The data used to update ParentChildren.
   */
  data: Prisma.XOR<Prisma.ParentChildUpdateManyMutationInput, Prisma.ParentChildUncheckedUpdateManyInput>
  /**
   * Filter which ParentChildren to update
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * Limit how many ParentChildren to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ParentChild upsert
 */
export type ParentChildUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * The filter to search for the ParentChild to update in case it exists.
   */
  where: Prisma.ParentChildWhereUniqueInput
  /**
   * In case the ParentChild found by the `where` argument doesn't exist, create a new ParentChild with this data.
   */
  create: Prisma.XOR<Prisma.ParentChildCreateInput, Prisma.ParentChildUncheckedCreateInput>
  /**
   * In case the ParentChild was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ParentChildUpdateInput, Prisma.ParentChildUncheckedUpdateInput>
}

/**
 * ParentChild delete
 */
export type ParentChildDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
  /**
   * Filter which ParentChild to delete.
   */
  where: Prisma.ParentChildWhereUniqueInput
}

/**
 * ParentChild deleteMany
 */
export type ParentChildDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParentChildren to delete
   */
  where?: Prisma.ParentChildWhereInput
  /**
   * Limit how many ParentChildren to delete.
   */
  limit?: number
}

/**
 * ParentChild without action
 */
export type ParentChildDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParentChild
   */
  select?: Prisma.ParentChildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParentChild
   */
  omit?: Prisma.ParentChildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ParentChildInclude<ExtArgs> | null
}
