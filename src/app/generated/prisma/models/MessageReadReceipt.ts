
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MessageReadReceipt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MessageReadReceipt
 * 
 */
export type MessageReadReceiptModel = runtime.Types.Result.DefaultSelection<Prisma.$MessageReadReceiptPayload>

export type AggregateMessageReadReceipt = {
  _count: MessageReadReceiptCountAggregateOutputType | null
  _min: MessageReadReceiptMinAggregateOutputType | null
  _max: MessageReadReceiptMaxAggregateOutputType | null
}

export type MessageReadReceiptMinAggregateOutputType = {
  id: string | null
  messageId: string | null
  userId: string | null
  readAt: Date | null
}

export type MessageReadReceiptMaxAggregateOutputType = {
  id: string | null
  messageId: string | null
  userId: string | null
  readAt: Date | null
}

export type MessageReadReceiptCountAggregateOutputType = {
  id: number
  messageId: number
  userId: number
  readAt: number
  _all: number
}


export type MessageReadReceiptMinAggregateInputType = {
  id?: true
  messageId?: true
  userId?: true
  readAt?: true
}

export type MessageReadReceiptMaxAggregateInputType = {
  id?: true
  messageId?: true
  userId?: true
  readAt?: true
}

export type MessageReadReceiptCountAggregateInputType = {
  id?: true
  messageId?: true
  userId?: true
  readAt?: true
  _all?: true
}

export type MessageReadReceiptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageReadReceipt to aggregate.
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReadReceipts to fetch.
   */
  orderBy?: Prisma.MessageReadReceiptOrderByWithRelationInput | Prisma.MessageReadReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MessageReadReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReadReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReadReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MessageReadReceipts
  **/
  _count?: true | MessageReadReceiptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MessageReadReceiptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MessageReadReceiptMaxAggregateInputType
}

export type GetMessageReadReceiptAggregateType<T extends MessageReadReceiptAggregateArgs> = {
      [P in keyof T & keyof AggregateMessageReadReceipt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMessageReadReceipt[P]>
    : Prisma.GetScalarType<T[P], AggregateMessageReadReceipt[P]>
}




export type MessageReadReceiptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageReadReceiptWhereInput
  orderBy?: Prisma.MessageReadReceiptOrderByWithAggregationInput | Prisma.MessageReadReceiptOrderByWithAggregationInput[]
  by: Prisma.MessageReadReceiptScalarFieldEnum[] | Prisma.MessageReadReceiptScalarFieldEnum
  having?: Prisma.MessageReadReceiptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MessageReadReceiptCountAggregateInputType | true
  _min?: MessageReadReceiptMinAggregateInputType
  _max?: MessageReadReceiptMaxAggregateInputType
}

export type MessageReadReceiptGroupByOutputType = {
  id: string
  messageId: string
  userId: string
  readAt: Date
  _count: MessageReadReceiptCountAggregateOutputType | null
  _min: MessageReadReceiptMinAggregateOutputType | null
  _max: MessageReadReceiptMaxAggregateOutputType | null
}

type GetMessageReadReceiptGroupByPayload<T extends MessageReadReceiptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MessageReadReceiptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MessageReadReceiptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MessageReadReceiptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MessageReadReceiptGroupByOutputType[P]>
      }
    >
  >



export type MessageReadReceiptWhereInput = {
  AND?: Prisma.MessageReadReceiptWhereInput | Prisma.MessageReadReceiptWhereInput[]
  OR?: Prisma.MessageReadReceiptWhereInput[]
  NOT?: Prisma.MessageReadReceiptWhereInput | Prisma.MessageReadReceiptWhereInput[]
  id?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  messageId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  userId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  readAt?: Prisma.DateTimeFilter<"MessageReadReceipt"> | Date | string
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MessageReadReceiptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  message?: Prisma.MessageOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MessageReadReceiptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  messageId_userId?: Prisma.MessageReadReceiptMessageIdUserIdCompoundUniqueInput
  AND?: Prisma.MessageReadReceiptWhereInput | Prisma.MessageReadReceiptWhereInput[]
  OR?: Prisma.MessageReadReceiptWhereInput[]
  NOT?: Prisma.MessageReadReceiptWhereInput | Prisma.MessageReadReceiptWhereInput[]
  messageId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  userId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  readAt?: Prisma.DateTimeFilter<"MessageReadReceipt"> | Date | string
  message?: Prisma.XOR<Prisma.MessageScalarRelationFilter, Prisma.MessageWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "messageId_userId">

export type MessageReadReceiptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  _count?: Prisma.MessageReadReceiptCountOrderByAggregateInput
  _max?: Prisma.MessageReadReceiptMaxOrderByAggregateInput
  _min?: Prisma.MessageReadReceiptMinOrderByAggregateInput
}

export type MessageReadReceiptScalarWhereWithAggregatesInput = {
  AND?: Prisma.MessageReadReceiptScalarWhereWithAggregatesInput | Prisma.MessageReadReceiptScalarWhereWithAggregatesInput[]
  OR?: Prisma.MessageReadReceiptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MessageReadReceiptScalarWhereWithAggregatesInput | Prisma.MessageReadReceiptScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"MessageReadReceipt"> | string
  messageId?: Prisma.UuidWithAggregatesFilter<"MessageReadReceipt"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"MessageReadReceipt"> | string
  readAt?: Prisma.DateTimeWithAggregatesFilter<"MessageReadReceipt"> | Date | string
}

export type MessageReadReceiptCreateInput = {
  id?: string
  readAt?: Date | string
  message: Prisma.MessageCreateNestedOneWithoutReadReceiptsInput
  user: Prisma.UserCreateNestedOneWithoutReadReceiptsInput
}

export type MessageReadReceiptUncheckedCreateInput = {
  id?: string
  messageId: string
  userId: string
  readAt?: Date | string
}

export type MessageReadReceiptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.MessageUpdateOneRequiredWithoutReadReceiptsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutReadReceiptsNestedInput
}

export type MessageReadReceiptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptCreateManyInput = {
  id?: string
  messageId: string
  userId: string
  readAt?: Date | string
}

export type MessageReadReceiptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptListRelationFilter = {
  every?: Prisma.MessageReadReceiptWhereInput
  some?: Prisma.MessageReadReceiptWhereInput
  none?: Prisma.MessageReadReceiptWhereInput
}

export type MessageReadReceiptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MessageReadReceiptMessageIdUserIdCompoundUniqueInput = {
  messageId: string
  userId: string
}

export type MessageReadReceiptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadReceiptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadReceiptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
}

export type MessageReadReceiptCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput> | Prisma.MessageReadReceiptCreateWithoutUserInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput | Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyUserInputEnvelope
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
}

export type MessageReadReceiptUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput> | Prisma.MessageReadReceiptCreateWithoutUserInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput | Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyUserInputEnvelope
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
}

export type MessageReadReceiptUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput> | Prisma.MessageReadReceiptCreateWithoutUserInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput | Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutUserInput | Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyUserInputEnvelope
  set?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  disconnect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  delete?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  update?: Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutUserInput | Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MessageReadReceiptUpdateManyWithWhereWithoutUserInput | Prisma.MessageReadReceiptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
}

export type MessageReadReceiptUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput> | Prisma.MessageReadReceiptCreateWithoutUserInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput | Prisma.MessageReadReceiptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutUserInput | Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyUserInputEnvelope
  set?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  disconnect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  delete?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  update?: Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutUserInput | Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MessageReadReceiptUpdateManyWithWhereWithoutUserInput | Prisma.MessageReadReceiptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
}

export type MessageReadReceiptCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput> | Prisma.MessageReadReceiptCreateWithoutMessageInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput | Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
}

export type MessageReadReceiptUncheckedCreateNestedManyWithoutMessageInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput> | Prisma.MessageReadReceiptCreateWithoutMessageInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput | Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyMessageInputEnvelope
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
}

export type MessageReadReceiptUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput> | Prisma.MessageReadReceiptCreateWithoutMessageInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput | Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyMessageInputEnvelope
  set?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  disconnect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  delete?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  update?: Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReadReceiptUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReadReceiptUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
}

export type MessageReadReceiptUncheckedUpdateManyWithoutMessageNestedInput = {
  create?: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput> | Prisma.MessageReadReceiptCreateWithoutMessageInput[] | Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput[]
  connectOrCreate?: Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput | Prisma.MessageReadReceiptCreateOrConnectWithoutMessageInput[]
  upsert?: Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutMessageInput | Prisma.MessageReadReceiptUpsertWithWhereUniqueWithoutMessageInput[]
  createMany?: Prisma.MessageReadReceiptCreateManyMessageInputEnvelope
  set?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  disconnect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  delete?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  connect?: Prisma.MessageReadReceiptWhereUniqueInput | Prisma.MessageReadReceiptWhereUniqueInput[]
  update?: Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutMessageInput | Prisma.MessageReadReceiptUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.MessageReadReceiptUpdateManyWithWhereWithoutMessageInput | Prisma.MessageReadReceiptUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
}

export type MessageReadReceiptCreateWithoutUserInput = {
  id?: string
  readAt?: Date | string
  message: Prisma.MessageCreateNestedOneWithoutReadReceiptsInput
}

export type MessageReadReceiptUncheckedCreateWithoutUserInput = {
  id?: string
  messageId: string
  readAt?: Date | string
}

export type MessageReadReceiptCreateOrConnectWithoutUserInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput>
}

export type MessageReadReceiptCreateManyUserInputEnvelope = {
  data: Prisma.MessageReadReceiptCreateManyUserInput | Prisma.MessageReadReceiptCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MessageReadReceiptUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReadReceiptUpdateWithoutUserInput, Prisma.MessageReadReceiptUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutUserInput, Prisma.MessageReadReceiptUncheckedCreateWithoutUserInput>
}

export type MessageReadReceiptUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateWithoutUserInput, Prisma.MessageReadReceiptUncheckedUpdateWithoutUserInput>
}

export type MessageReadReceiptUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MessageReadReceiptScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateManyMutationInput, Prisma.MessageReadReceiptUncheckedUpdateManyWithoutUserInput>
}

export type MessageReadReceiptScalarWhereInput = {
  AND?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
  OR?: Prisma.MessageReadReceiptScalarWhereInput[]
  NOT?: Prisma.MessageReadReceiptScalarWhereInput | Prisma.MessageReadReceiptScalarWhereInput[]
  id?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  messageId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  userId?: Prisma.UuidFilter<"MessageReadReceipt"> | string
  readAt?: Prisma.DateTimeFilter<"MessageReadReceipt"> | Date | string
}

export type MessageReadReceiptCreateWithoutMessageInput = {
  id?: string
  readAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReadReceiptsInput
}

export type MessageReadReceiptUncheckedCreateWithoutMessageInput = {
  id?: string
  userId: string
  readAt?: Date | string
}

export type MessageReadReceiptCreateOrConnectWithoutMessageInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  create: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput>
}

export type MessageReadReceiptCreateManyMessageInputEnvelope = {
  data: Prisma.MessageReadReceiptCreateManyMessageInput | Prisma.MessageReadReceiptCreateManyMessageInput[]
  skipDuplicates?: boolean
}

export type MessageReadReceiptUpsertWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  update: Prisma.XOR<Prisma.MessageReadReceiptUpdateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedUpdateWithoutMessageInput>
  create: Prisma.XOR<Prisma.MessageReadReceiptCreateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedCreateWithoutMessageInput>
}

export type MessageReadReceiptUpdateWithWhereUniqueWithoutMessageInput = {
  where: Prisma.MessageReadReceiptWhereUniqueInput
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateWithoutMessageInput, Prisma.MessageReadReceiptUncheckedUpdateWithoutMessageInput>
}

export type MessageReadReceiptUpdateManyWithWhereWithoutMessageInput = {
  where: Prisma.MessageReadReceiptScalarWhereInput
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateManyMutationInput, Prisma.MessageReadReceiptUncheckedUpdateManyWithoutMessageInput>
}

export type MessageReadReceiptCreateManyUserInput = {
  id?: string
  messageId: string
  readAt?: Date | string
}

export type MessageReadReceiptUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.MessageUpdateOneRequiredWithoutReadReceiptsNestedInput
}

export type MessageReadReceiptUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptCreateManyMessageInput = {
  id?: string
  userId: string
  readAt?: Date | string
}

export type MessageReadReceiptUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReadReceiptsNestedInput
}

export type MessageReadReceiptUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MessageReadReceiptUncheckedUpdateManyWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MessageReadReceiptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  userId?: boolean
  readAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReadReceipt"]>

export type MessageReadReceiptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  userId?: boolean
  readAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReadReceipt"]>

export type MessageReadReceiptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  userId?: boolean
  readAt?: boolean
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["messageReadReceipt"]>

export type MessageReadReceiptSelectScalar = {
  id?: boolean
  messageId?: boolean
  userId?: boolean
  readAt?: boolean
}

export type MessageReadReceiptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "messageId" | "userId" | "readAt", ExtArgs["result"]["messageReadReceipt"]>
export type MessageReadReceiptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MessageReadReceiptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MessageReadReceiptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.MessageDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MessageReadReceiptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MessageReadReceipt"
  objects: {
    message: Prisma.$MessagePayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    messageId: string
    userId: string
    readAt: Date
  }, ExtArgs["result"]["messageReadReceipt"]>
  composites: {}
}

export type MessageReadReceiptGetPayload<S extends boolean | null | undefined | MessageReadReceiptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload, S>

export type MessageReadReceiptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MessageReadReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MessageReadReceiptCountAggregateInputType | true
  }

export interface MessageReadReceiptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageReadReceipt'], meta: { name: 'MessageReadReceipt' } }
  /**
   * Find zero or one MessageReadReceipt that matches the filter.
   * @param {MessageReadReceiptFindUniqueArgs} args - Arguments to find a MessageReadReceipt
   * @example
   * // Get one MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MessageReadReceiptFindUniqueArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MessageReadReceipt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MessageReadReceiptFindUniqueOrThrowArgs} args - Arguments to find a MessageReadReceipt
   * @example
   * // Get one MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MessageReadReceiptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageReadReceipt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptFindFirstArgs} args - Arguments to find a MessageReadReceipt
   * @example
   * // Get one MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MessageReadReceiptFindFirstArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptFindFirstArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MessageReadReceipt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptFindFirstOrThrowArgs} args - Arguments to find a MessageReadReceipt
   * @example
   * // Get one MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MessageReadReceiptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MessageReadReceipts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MessageReadReceipts
   * const messageReadReceipts = await prisma.messageReadReceipt.findMany()
   * 
   * // Get first 10 MessageReadReceipts
   * const messageReadReceipts = await prisma.messageReadReceipt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const messageReadReceiptWithIdOnly = await prisma.messageReadReceipt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MessageReadReceiptFindManyArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MessageReadReceipt.
   * @param {MessageReadReceiptCreateArgs} args - Arguments to create a MessageReadReceipt.
   * @example
   * // Create one MessageReadReceipt
   * const MessageReadReceipt = await prisma.messageReadReceipt.create({
   *   data: {
   *     // ... data to create a MessageReadReceipt
   *   }
   * })
   * 
   */
  create<T extends MessageReadReceiptCreateArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptCreateArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MessageReadReceipts.
   * @param {MessageReadReceiptCreateManyArgs} args - Arguments to create many MessageReadReceipts.
   * @example
   * // Create many MessageReadReceipts
   * const messageReadReceipt = await prisma.messageReadReceipt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MessageReadReceiptCreateManyArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MessageReadReceipts and returns the data saved in the database.
   * @param {MessageReadReceiptCreateManyAndReturnArgs} args - Arguments to create many MessageReadReceipts.
   * @example
   * // Create many MessageReadReceipts
   * const messageReadReceipt = await prisma.messageReadReceipt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MessageReadReceipts and only return the `id`
   * const messageReadReceiptWithIdOnly = await prisma.messageReadReceipt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MessageReadReceiptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MessageReadReceipt.
   * @param {MessageReadReceiptDeleteArgs} args - Arguments to delete one MessageReadReceipt.
   * @example
   * // Delete one MessageReadReceipt
   * const MessageReadReceipt = await prisma.messageReadReceipt.delete({
   *   where: {
   *     // ... filter to delete one MessageReadReceipt
   *   }
   * })
   * 
   */
  delete<T extends MessageReadReceiptDeleteArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptDeleteArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MessageReadReceipt.
   * @param {MessageReadReceiptUpdateArgs} args - Arguments to update one MessageReadReceipt.
   * @example
   * // Update one MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MessageReadReceiptUpdateArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptUpdateArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MessageReadReceipts.
   * @param {MessageReadReceiptDeleteManyArgs} args - Arguments to filter MessageReadReceipts to delete.
   * @example
   * // Delete a few MessageReadReceipts
   * const { count } = await prisma.messageReadReceipt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MessageReadReceiptDeleteManyArgs>(args?: Prisma.SelectSubset<T, MessageReadReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReadReceipts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MessageReadReceipts
   * const messageReadReceipt = await prisma.messageReadReceipt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MessageReadReceiptUpdateManyArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MessageReadReceipts and returns the data updated in the database.
   * @param {MessageReadReceiptUpdateManyAndReturnArgs} args - Arguments to update many MessageReadReceipts.
   * @example
   * // Update many MessageReadReceipts
   * const messageReadReceipt = await prisma.messageReadReceipt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MessageReadReceipts and only return the `id`
   * const messageReadReceiptWithIdOnly = await prisma.messageReadReceipt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MessageReadReceiptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MessageReadReceipt.
   * @param {MessageReadReceiptUpsertArgs} args - Arguments to update or create a MessageReadReceipt.
   * @example
   * // Update or create a MessageReadReceipt
   * const messageReadReceipt = await prisma.messageReadReceipt.upsert({
   *   create: {
   *     // ... data to create a MessageReadReceipt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MessageReadReceipt we want to update
   *   }
   * })
   */
  upsert<T extends MessageReadReceiptUpsertArgs>(args: Prisma.SelectSubset<T, MessageReadReceiptUpsertArgs<ExtArgs>>): Prisma.Prisma__MessageReadReceiptClient<runtime.Types.Result.GetResult<Prisma.$MessageReadReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MessageReadReceipts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptCountArgs} args - Arguments to filter MessageReadReceipts to count.
   * @example
   * // Count the number of MessageReadReceipts
   * const count = await prisma.messageReadReceipt.count({
   *   where: {
   *     // ... the filter for the MessageReadReceipts we want to count
   *   }
   * })
  **/
  count<T extends MessageReadReceiptCountArgs>(
    args?: Prisma.Subset<T, MessageReadReceiptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MessageReadReceiptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MessageReadReceipt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MessageReadReceiptAggregateArgs>(args: Prisma.Subset<T, MessageReadReceiptAggregateArgs>): Prisma.PrismaPromise<GetMessageReadReceiptAggregateType<T>>

  /**
   * Group by MessageReadReceipt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MessageReadReceiptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MessageReadReceiptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MessageReadReceiptGroupByArgs['orderBy'] }
      : { orderBy?: MessageReadReceiptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MessageReadReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReadReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MessageReadReceipt model
 */
readonly fields: MessageReadReceiptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MessageReadReceipt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MessageReadReceiptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  message<T extends Prisma.MessageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MessageDefaultArgs<ExtArgs>>): Prisma.Prisma__MessageClient<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MessageReadReceipt model
 */
export interface MessageReadReceiptFieldRefs {
  readonly id: Prisma.FieldRef<"MessageReadReceipt", 'String'>
  readonly messageId: Prisma.FieldRef<"MessageReadReceipt", 'String'>
  readonly userId: Prisma.FieldRef<"MessageReadReceipt", 'String'>
  readonly readAt: Prisma.FieldRef<"MessageReadReceipt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MessageReadReceipt findUnique
 */
export type MessageReadReceiptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter, which MessageReadReceipt to fetch.
   */
  where: Prisma.MessageReadReceiptWhereUniqueInput
}

/**
 * MessageReadReceipt findUniqueOrThrow
 */
export type MessageReadReceiptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter, which MessageReadReceipt to fetch.
   */
  where: Prisma.MessageReadReceiptWhereUniqueInput
}

/**
 * MessageReadReceipt findFirst
 */
export type MessageReadReceiptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter, which MessageReadReceipt to fetch.
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReadReceipts to fetch.
   */
  orderBy?: Prisma.MessageReadReceiptOrderByWithRelationInput | Prisma.MessageReadReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReadReceipts.
   */
  cursor?: Prisma.MessageReadReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReadReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReadReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReadReceipts.
   */
  distinct?: Prisma.MessageReadReceiptScalarFieldEnum | Prisma.MessageReadReceiptScalarFieldEnum[]
}

/**
 * MessageReadReceipt findFirstOrThrow
 */
export type MessageReadReceiptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter, which MessageReadReceipt to fetch.
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReadReceipts to fetch.
   */
  orderBy?: Prisma.MessageReadReceiptOrderByWithRelationInput | Prisma.MessageReadReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MessageReadReceipts.
   */
  cursor?: Prisma.MessageReadReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReadReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReadReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MessageReadReceipts.
   */
  distinct?: Prisma.MessageReadReceiptScalarFieldEnum | Prisma.MessageReadReceiptScalarFieldEnum[]
}

/**
 * MessageReadReceipt findMany
 */
export type MessageReadReceiptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter, which MessageReadReceipts to fetch.
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MessageReadReceipts to fetch.
   */
  orderBy?: Prisma.MessageReadReceiptOrderByWithRelationInput | Prisma.MessageReadReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MessageReadReceipts.
   */
  cursor?: Prisma.MessageReadReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MessageReadReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MessageReadReceipts.
   */
  skip?: number
  distinct?: Prisma.MessageReadReceiptScalarFieldEnum | Prisma.MessageReadReceiptScalarFieldEnum[]
}

/**
 * MessageReadReceipt create
 */
export type MessageReadReceiptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * The data needed to create a MessageReadReceipt.
   */
  data: Prisma.XOR<Prisma.MessageReadReceiptCreateInput, Prisma.MessageReadReceiptUncheckedCreateInput>
}

/**
 * MessageReadReceipt createMany
 */
export type MessageReadReceiptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MessageReadReceipts.
   */
  data: Prisma.MessageReadReceiptCreateManyInput | Prisma.MessageReadReceiptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MessageReadReceipt createManyAndReturn
 */
export type MessageReadReceiptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * The data used to create many MessageReadReceipts.
   */
  data: Prisma.MessageReadReceiptCreateManyInput | Prisma.MessageReadReceiptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MessageReadReceipt update
 */
export type MessageReadReceiptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * The data needed to update a MessageReadReceipt.
   */
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateInput, Prisma.MessageReadReceiptUncheckedUpdateInput>
  /**
   * Choose, which MessageReadReceipt to update.
   */
  where: Prisma.MessageReadReceiptWhereUniqueInput
}

/**
 * MessageReadReceipt updateMany
 */
export type MessageReadReceiptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MessageReadReceipts.
   */
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateManyMutationInput, Prisma.MessageReadReceiptUncheckedUpdateManyInput>
  /**
   * Filter which MessageReadReceipts to update
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * Limit how many MessageReadReceipts to update.
   */
  limit?: number
}

/**
 * MessageReadReceipt updateManyAndReturn
 */
export type MessageReadReceiptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * The data used to update MessageReadReceipts.
   */
  data: Prisma.XOR<Prisma.MessageReadReceiptUpdateManyMutationInput, Prisma.MessageReadReceiptUncheckedUpdateManyInput>
  /**
   * Filter which MessageReadReceipts to update
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * Limit how many MessageReadReceipts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MessageReadReceipt upsert
 */
export type MessageReadReceiptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * The filter to search for the MessageReadReceipt to update in case it exists.
   */
  where: Prisma.MessageReadReceiptWhereUniqueInput
  /**
   * In case the MessageReadReceipt found by the `where` argument doesn't exist, create a new MessageReadReceipt with this data.
   */
  create: Prisma.XOR<Prisma.MessageReadReceiptCreateInput, Prisma.MessageReadReceiptUncheckedCreateInput>
  /**
   * In case the MessageReadReceipt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MessageReadReceiptUpdateInput, Prisma.MessageReadReceiptUncheckedUpdateInput>
}

/**
 * MessageReadReceipt delete
 */
export type MessageReadReceiptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
  /**
   * Filter which MessageReadReceipt to delete.
   */
  where: Prisma.MessageReadReceiptWhereUniqueInput
}

/**
 * MessageReadReceipt deleteMany
 */
export type MessageReadReceiptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MessageReadReceipts to delete
   */
  where?: Prisma.MessageReadReceiptWhereInput
  /**
   * Limit how many MessageReadReceipts to delete.
   */
  limit?: number
}

/**
 * MessageReadReceipt without action
 */
export type MessageReadReceiptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MessageReadReceipt
   */
  select?: Prisma.MessageReadReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MessageReadReceipt
   */
  omit?: Prisma.MessageReadReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageReadReceiptInclude<ExtArgs> | null
}
