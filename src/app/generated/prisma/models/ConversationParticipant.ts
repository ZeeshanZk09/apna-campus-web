
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ConversationParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ConversationParticipant
 * 
 */
export type ConversationParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$ConversationParticipantPayload>

export type AggregateConversationParticipant = {
  _count: ConversationParticipantCountAggregateOutputType | null
  _min: ConversationParticipantMinAggregateOutputType | null
  _max: ConversationParticipantMaxAggregateOutputType | null
}

export type ConversationParticipantMinAggregateOutputType = {
  id: string | null
  conversationId: string | null
  userId: string | null
  joinedAt: Date | null
  role: string | null
  mutedUntil: Date | null
  canWrite: boolean | null
  canViewHistory: boolean | null
}

export type ConversationParticipantMaxAggregateOutputType = {
  id: string | null
  conversationId: string | null
  userId: string | null
  joinedAt: Date | null
  role: string | null
  mutedUntil: Date | null
  canWrite: boolean | null
  canViewHistory: boolean | null
}

export type ConversationParticipantCountAggregateOutputType = {
  id: number
  conversationId: number
  userId: number
  joinedAt: number
  role: number
  mutedUntil: number
  canWrite: number
  canViewHistory: number
  _all: number
}


export type ConversationParticipantMinAggregateInputType = {
  id?: true
  conversationId?: true
  userId?: true
  joinedAt?: true
  role?: true
  mutedUntil?: true
  canWrite?: true
  canViewHistory?: true
}

export type ConversationParticipantMaxAggregateInputType = {
  id?: true
  conversationId?: true
  userId?: true
  joinedAt?: true
  role?: true
  mutedUntil?: true
  canWrite?: true
  canViewHistory?: true
}

export type ConversationParticipantCountAggregateInputType = {
  id?: true
  conversationId?: true
  userId?: true
  joinedAt?: true
  role?: true
  mutedUntil?: true
  canWrite?: true
  canViewHistory?: true
  _all?: true
}

export type ConversationParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConversationParticipant to aggregate.
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationParticipants to fetch.
   */
  orderBy?: Prisma.ConversationParticipantOrderByWithRelationInput | Prisma.ConversationParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConversationParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConversationParticipants
  **/
  _count?: true | ConversationParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConversationParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConversationParticipantMaxAggregateInputType
}

export type GetConversationParticipantAggregateType<T extends ConversationParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateConversationParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConversationParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateConversationParticipant[P]>
}




export type ConversationParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConversationParticipantWhereInput
  orderBy?: Prisma.ConversationParticipantOrderByWithAggregationInput | Prisma.ConversationParticipantOrderByWithAggregationInput[]
  by: Prisma.ConversationParticipantScalarFieldEnum[] | Prisma.ConversationParticipantScalarFieldEnum
  having?: Prisma.ConversationParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConversationParticipantCountAggregateInputType | true
  _min?: ConversationParticipantMinAggregateInputType
  _max?: ConversationParticipantMaxAggregateInputType
}

export type ConversationParticipantGroupByOutputType = {
  id: string
  conversationId: string
  userId: string
  joinedAt: Date
  role: string | null
  mutedUntil: Date | null
  canWrite: boolean
  canViewHistory: boolean
  _count: ConversationParticipantCountAggregateOutputType | null
  _min: ConversationParticipantMinAggregateOutputType | null
  _max: ConversationParticipantMaxAggregateOutputType | null
}

type GetConversationParticipantGroupByPayload<T extends ConversationParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConversationParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConversationParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConversationParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConversationParticipantGroupByOutputType[P]>
      }
    >
  >



export type ConversationParticipantWhereInput = {
  AND?: Prisma.ConversationParticipantWhereInput | Prisma.ConversationParticipantWhereInput[]
  OR?: Prisma.ConversationParticipantWhereInput[]
  NOT?: Prisma.ConversationParticipantWhereInput | Prisma.ConversationParticipantWhereInput[]
  id?: Prisma.UuidFilter<"ConversationParticipant"> | string
  conversationId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  userId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  joinedAt?: Prisma.DateTimeFilter<"ConversationParticipant"> | Date | string
  role?: Prisma.StringNullableFilter<"ConversationParticipant"> | string | null
  mutedUntil?: Prisma.DateTimeNullableFilter<"ConversationParticipant"> | Date | string | null
  canWrite?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
  canViewHistory?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
  conversation?: Prisma.XOR<Prisma.ConversationScalarRelationFilter, Prisma.ConversationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ConversationParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  mutedUntil?: Prisma.SortOrderInput | Prisma.SortOrder
  canWrite?: Prisma.SortOrder
  canViewHistory?: Prisma.SortOrder
  conversation?: Prisma.ConversationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ConversationParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  conversationId_userId?: Prisma.ConversationParticipantConversationIdUserIdCompoundUniqueInput
  AND?: Prisma.ConversationParticipantWhereInput | Prisma.ConversationParticipantWhereInput[]
  OR?: Prisma.ConversationParticipantWhereInput[]
  NOT?: Prisma.ConversationParticipantWhereInput | Prisma.ConversationParticipantWhereInput[]
  conversationId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  userId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  joinedAt?: Prisma.DateTimeFilter<"ConversationParticipant"> | Date | string
  role?: Prisma.StringNullableFilter<"ConversationParticipant"> | string | null
  mutedUntil?: Prisma.DateTimeNullableFilter<"ConversationParticipant"> | Date | string | null
  canWrite?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
  canViewHistory?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
  conversation?: Prisma.XOR<Prisma.ConversationScalarRelationFilter, Prisma.ConversationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "conversationId_userId">

export type ConversationParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  mutedUntil?: Prisma.SortOrderInput | Prisma.SortOrder
  canWrite?: Prisma.SortOrder
  canViewHistory?: Prisma.SortOrder
  _count?: Prisma.ConversationParticipantCountOrderByAggregateInput
  _max?: Prisma.ConversationParticipantMaxOrderByAggregateInput
  _min?: Prisma.ConversationParticipantMinOrderByAggregateInput
}

export type ConversationParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConversationParticipantScalarWhereWithAggregatesInput | Prisma.ConversationParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConversationParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConversationParticipantScalarWhereWithAggregatesInput | Prisma.ConversationParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ConversationParticipant"> | string
  conversationId?: Prisma.UuidWithAggregatesFilter<"ConversationParticipant"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ConversationParticipant"> | string
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"ConversationParticipant"> | Date | string
  role?: Prisma.StringNullableWithAggregatesFilter<"ConversationParticipant"> | string | null
  mutedUntil?: Prisma.DateTimeNullableWithAggregatesFilter<"ConversationParticipant"> | Date | string | null
  canWrite?: Prisma.BoolWithAggregatesFilter<"ConversationParticipant"> | boolean
  canViewHistory?: Prisma.BoolWithAggregatesFilter<"ConversationParticipant"> | boolean
}

export type ConversationParticipantCreateInput = {
  id?: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
  conversation: Prisma.ConversationCreateNestedOneWithoutParticipantsInput
  user: Prisma.UserCreateNestedOneWithoutConversationParticipantsInput
}

export type ConversationParticipantUncheckedCreateInput = {
  id?: string
  conversationId: string
  userId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
  conversation?: Prisma.ConversationUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutConversationParticipantsNestedInput
}

export type ConversationParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantCreateManyInput = {
  id?: string
  conversationId: string
  userId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantListRelationFilter = {
  every?: Prisma.ConversationParticipantWhereInput
  some?: Prisma.ConversationParticipantWhereInput
  none?: Prisma.ConversationParticipantWhereInput
}

export type ConversationParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ConversationParticipantConversationIdUserIdCompoundUniqueInput = {
  conversationId: string
  userId: string
}

export type ConversationParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
  mutedUntil?: Prisma.SortOrder
  canWrite?: Prisma.SortOrder
  canViewHistory?: Prisma.SortOrder
}

export type ConversationParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
  mutedUntil?: Prisma.SortOrder
  canWrite?: Prisma.SortOrder
  canViewHistory?: Prisma.SortOrder
}

export type ConversationParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
  mutedUntil?: Prisma.SortOrder
  canWrite?: Prisma.SortOrder
  canViewHistory?: Prisma.SortOrder
}

export type ConversationParticipantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput> | Prisma.ConversationParticipantCreateWithoutUserInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutUserInput | Prisma.ConversationParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ConversationParticipantCreateManyUserInputEnvelope
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
}

export type ConversationParticipantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput> | Prisma.ConversationParticipantCreateWithoutUserInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutUserInput | Prisma.ConversationParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ConversationParticipantCreateManyUserInputEnvelope
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
}

export type ConversationParticipantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput> | Prisma.ConversationParticipantCreateWithoutUserInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutUserInput | Prisma.ConversationParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ConversationParticipantCreateManyUserInputEnvelope
  set?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  disconnect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  delete?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  update?: Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ConversationParticipantUpdateManyWithWhereWithoutUserInput | Prisma.ConversationParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
}

export type ConversationParticipantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput> | Prisma.ConversationParticipantCreateWithoutUserInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutUserInput | Prisma.ConversationParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ConversationParticipantCreateManyUserInputEnvelope
  set?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  disconnect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  delete?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  update?: Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ConversationParticipantUpdateManyWithWhereWithoutUserInput | Prisma.ConversationParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
}

export type ConversationParticipantCreateNestedManyWithoutConversationInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput> | Prisma.ConversationParticipantCreateWithoutConversationInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput | Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput[]
  createMany?: Prisma.ConversationParticipantCreateManyConversationInputEnvelope
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
}

export type ConversationParticipantUncheckedCreateNestedManyWithoutConversationInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput> | Prisma.ConversationParticipantCreateWithoutConversationInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput | Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput[]
  createMany?: Prisma.ConversationParticipantCreateManyConversationInputEnvelope
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
}

export type ConversationParticipantUpdateManyWithoutConversationNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput> | Prisma.ConversationParticipantCreateWithoutConversationInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput | Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput[]
  upsert?: Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput | Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput[]
  createMany?: Prisma.ConversationParticipantCreateManyConversationInputEnvelope
  set?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  disconnect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  delete?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  update?: Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput | Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput[]
  updateMany?: Prisma.ConversationParticipantUpdateManyWithWhereWithoutConversationInput | Prisma.ConversationParticipantUpdateManyWithWhereWithoutConversationInput[]
  deleteMany?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
}

export type ConversationParticipantUncheckedUpdateManyWithoutConversationNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput> | Prisma.ConversationParticipantCreateWithoutConversationInput[] | Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput[]
  connectOrCreate?: Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput | Prisma.ConversationParticipantCreateOrConnectWithoutConversationInput[]
  upsert?: Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput | Prisma.ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput[]
  createMany?: Prisma.ConversationParticipantCreateManyConversationInputEnvelope
  set?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  disconnect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  delete?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  connect?: Prisma.ConversationParticipantWhereUniqueInput | Prisma.ConversationParticipantWhereUniqueInput[]
  update?: Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput | Prisma.ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput[]
  updateMany?: Prisma.ConversationParticipantUpdateManyWithWhereWithoutConversationInput | Prisma.ConversationParticipantUpdateManyWithWhereWithoutConversationInput[]
  deleteMany?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
}

export type ConversationParticipantCreateWithoutUserInput = {
  id?: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
  conversation: Prisma.ConversationCreateNestedOneWithoutParticipantsInput
}

export type ConversationParticipantUncheckedCreateWithoutUserInput = {
  id?: string
  conversationId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantCreateOrConnectWithoutUserInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput>
}

export type ConversationParticipantCreateManyUserInputEnvelope = {
  data: Prisma.ConversationParticipantCreateManyUserInput | Prisma.ConversationParticipantCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ConversationParticipantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ConversationParticipantUpdateWithoutUserInput, Prisma.ConversationParticipantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutUserInput, Prisma.ConversationParticipantUncheckedCreateWithoutUserInput>
}

export type ConversationParticipantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateWithoutUserInput, Prisma.ConversationParticipantUncheckedUpdateWithoutUserInput>
}

export type ConversationParticipantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ConversationParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateManyMutationInput, Prisma.ConversationParticipantUncheckedUpdateManyWithoutUserInput>
}

export type ConversationParticipantScalarWhereInput = {
  AND?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
  OR?: Prisma.ConversationParticipantScalarWhereInput[]
  NOT?: Prisma.ConversationParticipantScalarWhereInput | Prisma.ConversationParticipantScalarWhereInput[]
  id?: Prisma.UuidFilter<"ConversationParticipant"> | string
  conversationId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  userId?: Prisma.UuidFilter<"ConversationParticipant"> | string
  joinedAt?: Prisma.DateTimeFilter<"ConversationParticipant"> | Date | string
  role?: Prisma.StringNullableFilter<"ConversationParticipant"> | string | null
  mutedUntil?: Prisma.DateTimeNullableFilter<"ConversationParticipant"> | Date | string | null
  canWrite?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
  canViewHistory?: Prisma.BoolFilter<"ConversationParticipant"> | boolean
}

export type ConversationParticipantCreateWithoutConversationInput = {
  id?: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
  user: Prisma.UserCreateNestedOneWithoutConversationParticipantsInput
}

export type ConversationParticipantUncheckedCreateWithoutConversationInput = {
  id?: string
  userId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantCreateOrConnectWithoutConversationInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput>
}

export type ConversationParticipantCreateManyConversationInputEnvelope = {
  data: Prisma.ConversationParticipantCreateManyConversationInput | Prisma.ConversationParticipantCreateManyConversationInput[]
  skipDuplicates?: boolean
}

export type ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ConversationParticipantUpdateWithoutConversationInput, Prisma.ConversationParticipantUncheckedUpdateWithoutConversationInput>
  create: Prisma.XOR<Prisma.ConversationParticipantCreateWithoutConversationInput, Prisma.ConversationParticipantUncheckedCreateWithoutConversationInput>
}

export type ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput = {
  where: Prisma.ConversationParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateWithoutConversationInput, Prisma.ConversationParticipantUncheckedUpdateWithoutConversationInput>
}

export type ConversationParticipantUpdateManyWithWhereWithoutConversationInput = {
  where: Prisma.ConversationParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateManyMutationInput, Prisma.ConversationParticipantUncheckedUpdateManyWithoutConversationInput>
}

export type ConversationParticipantCreateManyUserInput = {
  id?: string
  conversationId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
  conversation?: Prisma.ConversationUpdateOneRequiredWithoutParticipantsNestedInput
}

export type ConversationParticipantUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantCreateManyConversationInput = {
  id?: string
  userId: string
  joinedAt?: Date | string
  role?: string | null
  mutedUntil?: Date | string | null
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutConversationParticipantsNestedInput
}

export type ConversationParticipantUncheckedUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ConversationParticipantUncheckedUpdateManyWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mutedUntil?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  canWrite?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canViewHistory?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type ConversationParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  userId?: boolean
  joinedAt?: boolean
  role?: boolean
  mutedUntil?: boolean
  canWrite?: boolean
  canViewHistory?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationParticipant"]>

export type ConversationParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  userId?: boolean
  joinedAt?: boolean
  role?: boolean
  mutedUntil?: boolean
  canWrite?: boolean
  canViewHistory?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationParticipant"]>

export type ConversationParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  userId?: boolean
  joinedAt?: boolean
  role?: boolean
  mutedUntil?: boolean
  canWrite?: boolean
  canViewHistory?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationParticipant"]>

export type ConversationParticipantSelectScalar = {
  id?: boolean
  conversationId?: boolean
  userId?: boolean
  joinedAt?: boolean
  role?: boolean
  mutedUntil?: boolean
  canWrite?: boolean
  canViewHistory?: boolean
}

export type ConversationParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "conversationId" | "userId" | "joinedAt" | "role" | "mutedUntil" | "canWrite" | "canViewHistory", ExtArgs["result"]["conversationParticipant"]>
export type ConversationParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ConversationParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ConversationParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ConversationParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConversationParticipant"
  objects: {
    conversation: Prisma.$ConversationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    conversationId: string
    userId: string
    joinedAt: Date
    role: string | null
    mutedUntil: Date | null
    canWrite: boolean
    canViewHistory: boolean
  }, ExtArgs["result"]["conversationParticipant"]>
  composites: {}
}

export type ConversationParticipantGetPayload<S extends boolean | null | undefined | ConversationParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload, S>

export type ConversationParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConversationParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConversationParticipantCountAggregateInputType | true
  }

export interface ConversationParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationParticipant'], meta: { name: 'ConversationParticipant' } }
  /**
   * Find zero or one ConversationParticipant that matches the filter.
   * @param {ConversationParticipantFindUniqueArgs} args - Arguments to find a ConversationParticipant
   * @example
   * // Get one ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConversationParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, ConversationParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConversationParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConversationParticipantFindUniqueOrThrowArgs} args - Arguments to find a ConversationParticipant
   * @example
   * // Get one ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConversationParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConversationParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConversationParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantFindFirstArgs} args - Arguments to find a ConversationParticipant
   * @example
   * // Get one ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConversationParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConversationParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantFindFirstOrThrowArgs} args - Arguments to find a ConversationParticipant
   * @example
   * // Get one ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConversationParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConversationParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConversationParticipants
   * const conversationParticipants = await prisma.conversationParticipant.findMany()
   * 
   * // Get first 10 ConversationParticipants
   * const conversationParticipants = await prisma.conversationParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const conversationParticipantWithIdOnly = await prisma.conversationParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConversationParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConversationParticipant.
   * @param {ConversationParticipantCreateArgs} args - Arguments to create a ConversationParticipant.
   * @example
   * // Create one ConversationParticipant
   * const ConversationParticipant = await prisma.conversationParticipant.create({
   *   data: {
   *     // ... data to create a ConversationParticipant
   *   }
   * })
   * 
   */
  create<T extends ConversationParticipantCreateArgs>(args: Prisma.SelectSubset<T, ConversationParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConversationParticipants.
   * @param {ConversationParticipantCreateManyArgs} args - Arguments to create many ConversationParticipants.
   * @example
   * // Create many ConversationParticipants
   * const conversationParticipant = await prisma.conversationParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConversationParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConversationParticipants and returns the data saved in the database.
   * @param {ConversationParticipantCreateManyAndReturnArgs} args - Arguments to create many ConversationParticipants.
   * @example
   * // Create many ConversationParticipants
   * const conversationParticipant = await prisma.conversationParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConversationParticipants and only return the `id`
   * const conversationParticipantWithIdOnly = await prisma.conversationParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConversationParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConversationParticipant.
   * @param {ConversationParticipantDeleteArgs} args - Arguments to delete one ConversationParticipant.
   * @example
   * // Delete one ConversationParticipant
   * const ConversationParticipant = await prisma.conversationParticipant.delete({
   *   where: {
   *     // ... filter to delete one ConversationParticipant
   *   }
   * })
   * 
   */
  delete<T extends ConversationParticipantDeleteArgs>(args: Prisma.SelectSubset<T, ConversationParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConversationParticipant.
   * @param {ConversationParticipantUpdateArgs} args - Arguments to update one ConversationParticipant.
   * @example
   * // Update one ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConversationParticipantUpdateArgs>(args: Prisma.SelectSubset<T, ConversationParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConversationParticipants.
   * @param {ConversationParticipantDeleteManyArgs} args - Arguments to filter ConversationParticipants to delete.
   * @example
   * // Delete a few ConversationParticipants
   * const { count } = await prisma.conversationParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConversationParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConversationParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConversationParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConversationParticipants
   * const conversationParticipant = await prisma.conversationParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConversationParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, ConversationParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConversationParticipants and returns the data updated in the database.
   * @param {ConversationParticipantUpdateManyAndReturnArgs} args - Arguments to update many ConversationParticipants.
   * @example
   * // Update many ConversationParticipants
   * const conversationParticipant = await prisma.conversationParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConversationParticipants and only return the `id`
   * const conversationParticipantWithIdOnly = await prisma.conversationParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConversationParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConversationParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConversationParticipant.
   * @param {ConversationParticipantUpsertArgs} args - Arguments to update or create a ConversationParticipant.
   * @example
   * // Update or create a ConversationParticipant
   * const conversationParticipant = await prisma.conversationParticipant.upsert({
   *   create: {
   *     // ... data to create a ConversationParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConversationParticipant we want to update
   *   }
   * })
   */
  upsert<T extends ConversationParticipantUpsertArgs>(args: Prisma.SelectSubset<T, ConversationParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__ConversationParticipantClient<runtime.Types.Result.GetResult<Prisma.$ConversationParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConversationParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantCountArgs} args - Arguments to filter ConversationParticipants to count.
   * @example
   * // Count the number of ConversationParticipants
   * const count = await prisma.conversationParticipant.count({
   *   where: {
   *     // ... the filter for the ConversationParticipants we want to count
   *   }
   * })
  **/
  count<T extends ConversationParticipantCountArgs>(
    args?: Prisma.Subset<T, ConversationParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConversationParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConversationParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConversationParticipantAggregateArgs>(args: Prisma.Subset<T, ConversationParticipantAggregateArgs>): Prisma.PrismaPromise<GetConversationParticipantAggregateType<T>>

  /**
   * Group by ConversationParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConversationParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConversationParticipantGroupByArgs['orderBy'] }
      : { orderBy?: ConversationParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConversationParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConversationParticipant model
 */
readonly fields: ConversationParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConversationParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConversationParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  conversation<T extends Prisma.ConversationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ConversationDefaultArgs<ExtArgs>>): Prisma.Prisma__ConversationClient<runtime.Types.Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConversationParticipant model
 */
export interface ConversationParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"ConversationParticipant", 'String'>
  readonly conversationId: Prisma.FieldRef<"ConversationParticipant", 'String'>
  readonly userId: Prisma.FieldRef<"ConversationParticipant", 'String'>
  readonly joinedAt: Prisma.FieldRef<"ConversationParticipant", 'DateTime'>
  readonly role: Prisma.FieldRef<"ConversationParticipant", 'String'>
  readonly mutedUntil: Prisma.FieldRef<"ConversationParticipant", 'DateTime'>
  readonly canWrite: Prisma.FieldRef<"ConversationParticipant", 'Boolean'>
  readonly canViewHistory: Prisma.FieldRef<"ConversationParticipant", 'Boolean'>
}
    

// Custom InputTypes
/**
 * ConversationParticipant findUnique
 */
export type ConversationParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ConversationParticipant to fetch.
   */
  where: Prisma.ConversationParticipantWhereUniqueInput
}

/**
 * ConversationParticipant findUniqueOrThrow
 */
export type ConversationParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ConversationParticipant to fetch.
   */
  where: Prisma.ConversationParticipantWhereUniqueInput
}

/**
 * ConversationParticipant findFirst
 */
export type ConversationParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ConversationParticipant to fetch.
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationParticipants to fetch.
   */
  orderBy?: Prisma.ConversationParticipantOrderByWithRelationInput | Prisma.ConversationParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConversationParticipants.
   */
  cursor?: Prisma.ConversationParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConversationParticipants.
   */
  distinct?: Prisma.ConversationParticipantScalarFieldEnum | Prisma.ConversationParticipantScalarFieldEnum[]
}

/**
 * ConversationParticipant findFirstOrThrow
 */
export type ConversationParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ConversationParticipant to fetch.
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationParticipants to fetch.
   */
  orderBy?: Prisma.ConversationParticipantOrderByWithRelationInput | Prisma.ConversationParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConversationParticipants.
   */
  cursor?: Prisma.ConversationParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConversationParticipants.
   */
  distinct?: Prisma.ConversationParticipantScalarFieldEnum | Prisma.ConversationParticipantScalarFieldEnum[]
}

/**
 * ConversationParticipant findMany
 */
export type ConversationParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ConversationParticipants to fetch.
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationParticipants to fetch.
   */
  orderBy?: Prisma.ConversationParticipantOrderByWithRelationInput | Prisma.ConversationParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConversationParticipants.
   */
  cursor?: Prisma.ConversationParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationParticipants.
   */
  skip?: number
  distinct?: Prisma.ConversationParticipantScalarFieldEnum | Prisma.ConversationParticipantScalarFieldEnum[]
}

/**
 * ConversationParticipant create
 */
export type ConversationParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a ConversationParticipant.
   */
  data: Prisma.XOR<Prisma.ConversationParticipantCreateInput, Prisma.ConversationParticipantUncheckedCreateInput>
}

/**
 * ConversationParticipant createMany
 */
export type ConversationParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConversationParticipants.
   */
  data: Prisma.ConversationParticipantCreateManyInput | Prisma.ConversationParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConversationParticipant createManyAndReturn
 */
export type ConversationParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many ConversationParticipants.
   */
  data: Prisma.ConversationParticipantCreateManyInput | Prisma.ConversationParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ConversationParticipant update
 */
export type ConversationParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a ConversationParticipant.
   */
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateInput, Prisma.ConversationParticipantUncheckedUpdateInput>
  /**
   * Choose, which ConversationParticipant to update.
   */
  where: Prisma.ConversationParticipantWhereUniqueInput
}

/**
 * ConversationParticipant updateMany
 */
export type ConversationParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConversationParticipants.
   */
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateManyMutationInput, Prisma.ConversationParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ConversationParticipants to update
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * Limit how many ConversationParticipants to update.
   */
  limit?: number
}

/**
 * ConversationParticipant updateManyAndReturn
 */
export type ConversationParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * The data used to update ConversationParticipants.
   */
  data: Prisma.XOR<Prisma.ConversationParticipantUpdateManyMutationInput, Prisma.ConversationParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ConversationParticipants to update
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * Limit how many ConversationParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ConversationParticipant upsert
 */
export type ConversationParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the ConversationParticipant to update in case it exists.
   */
  where: Prisma.ConversationParticipantWhereUniqueInput
  /**
   * In case the ConversationParticipant found by the `where` argument doesn't exist, create a new ConversationParticipant with this data.
   */
  create: Prisma.XOR<Prisma.ConversationParticipantCreateInput, Prisma.ConversationParticipantUncheckedCreateInput>
  /**
   * In case the ConversationParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConversationParticipantUpdateInput, Prisma.ConversationParticipantUncheckedUpdateInput>
}

/**
 * ConversationParticipant delete
 */
export type ConversationParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
  /**
   * Filter which ConversationParticipant to delete.
   */
  where: Prisma.ConversationParticipantWhereUniqueInput
}

/**
 * ConversationParticipant deleteMany
 */
export type ConversationParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConversationParticipants to delete
   */
  where?: Prisma.ConversationParticipantWhereInput
  /**
   * Limit how many ConversationParticipants to delete.
   */
  limit?: number
}

/**
 * ConversationParticipant without action
 */
export type ConversationParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationParticipant
   */
  select?: Prisma.ConversationParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationParticipant
   */
  omit?: Prisma.ConversationParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationParticipantInclude<ExtArgs> | null
}
