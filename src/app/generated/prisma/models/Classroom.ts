
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Classroom` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Classroom
 * 
 */
export type ClassroomModel = runtime.Types.Result.DefaultSelection<Prisma.$ClassroomPayload>

export type AggregateClassroom = {
  _count: ClassroomCountAggregateOutputType | null
  _avg: ClassroomAvgAggregateOutputType | null
  _sum: ClassroomSumAggregateOutputType | null
  _min: ClassroomMinAggregateOutputType | null
  _max: ClassroomMaxAggregateOutputType | null
}

export type ClassroomAvgAggregateOutputType = {
  capacity: number | null
}

export type ClassroomSumAggregateOutputType = {
  capacity: number | null
}

export type ClassroomMinAggregateOutputType = {
  id: string | null
  cohortId: string | null
  name: string | null
  capacity: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClassroomMaxAggregateOutputType = {
  id: string | null
  cohortId: string | null
  name: string | null
  capacity: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClassroomCountAggregateOutputType = {
  id: number
  cohortId: number
  name: number
  capacity: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ClassroomAvgAggregateInputType = {
  capacity?: true
}

export type ClassroomSumAggregateInputType = {
  capacity?: true
}

export type ClassroomMinAggregateInputType = {
  id?: true
  cohortId?: true
  name?: true
  capacity?: true
  createdAt?: true
  updatedAt?: true
}

export type ClassroomMaxAggregateInputType = {
  id?: true
  cohortId?: true
  name?: true
  capacity?: true
  createdAt?: true
  updatedAt?: true
}

export type ClassroomCountAggregateInputType = {
  id?: true
  cohortId?: true
  name?: true
  capacity?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ClassroomAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Classroom to aggregate.
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Classrooms to fetch.
   */
  orderBy?: Prisma.ClassroomOrderByWithRelationInput | Prisma.ClassroomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClassroomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Classrooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Classrooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Classrooms
  **/
  _count?: true | ClassroomCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ClassroomAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ClassroomSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClassroomMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClassroomMaxAggregateInputType
}

export type GetClassroomAggregateType<T extends ClassroomAggregateArgs> = {
      [P in keyof T & keyof AggregateClassroom]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClassroom[P]>
    : Prisma.GetScalarType<T[P], AggregateClassroom[P]>
}




export type ClassroomGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClassroomWhereInput
  orderBy?: Prisma.ClassroomOrderByWithAggregationInput | Prisma.ClassroomOrderByWithAggregationInput[]
  by: Prisma.ClassroomScalarFieldEnum[] | Prisma.ClassroomScalarFieldEnum
  having?: Prisma.ClassroomScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClassroomCountAggregateInputType | true
  _avg?: ClassroomAvgAggregateInputType
  _sum?: ClassroomSumAggregateInputType
  _min?: ClassroomMinAggregateInputType
  _max?: ClassroomMaxAggregateInputType
}

export type ClassroomGroupByOutputType = {
  id: string
  cohortId: string | null
  name: string
  capacity: number | null
  createdAt: Date
  updatedAt: Date
  _count: ClassroomCountAggregateOutputType | null
  _avg: ClassroomAvgAggregateOutputType | null
  _sum: ClassroomSumAggregateOutputType | null
  _min: ClassroomMinAggregateOutputType | null
  _max: ClassroomMaxAggregateOutputType | null
}

type GetClassroomGroupByPayload<T extends ClassroomGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClassroomGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClassroomGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClassroomGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClassroomGroupByOutputType[P]>
      }
    >
  >



export type ClassroomWhereInput = {
  AND?: Prisma.ClassroomWhereInput | Prisma.ClassroomWhereInput[]
  OR?: Prisma.ClassroomWhereInput[]
  NOT?: Prisma.ClassroomWhereInput | Prisma.ClassroomWhereInput[]
  id?: Prisma.UuidFilter<"Classroom"> | string
  cohortId?: Prisma.UuidNullableFilter<"Classroom"> | string | null
  name?: Prisma.StringFilter<"Classroom"> | string
  capacity?: Prisma.IntNullableFilter<"Classroom"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
  cohort?: Prisma.XOR<Prisma.CohortNullableScalarRelationFilter, Prisma.CohortWhereInput> | null
}

export type ClassroomOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cohortId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  cohort?: Prisma.CohortOrderByWithRelationInput
}

export type ClassroomWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ClassroomWhereInput | Prisma.ClassroomWhereInput[]
  OR?: Prisma.ClassroomWhereInput[]
  NOT?: Prisma.ClassroomWhereInput | Prisma.ClassroomWhereInput[]
  cohortId?: Prisma.UuidNullableFilter<"Classroom"> | string | null
  name?: Prisma.StringFilter<"Classroom"> | string
  capacity?: Prisma.IntNullableFilter<"Classroom"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
  cohort?: Prisma.XOR<Prisma.CohortNullableScalarRelationFilter, Prisma.CohortWhereInput> | null
}, "id">

export type ClassroomOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cohortId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ClassroomCountOrderByAggregateInput
  _avg?: Prisma.ClassroomAvgOrderByAggregateInput
  _max?: Prisma.ClassroomMaxOrderByAggregateInput
  _min?: Prisma.ClassroomMinOrderByAggregateInput
  _sum?: Prisma.ClassroomSumOrderByAggregateInput
}

export type ClassroomScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClassroomScalarWhereWithAggregatesInput | Prisma.ClassroomScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClassroomScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClassroomScalarWhereWithAggregatesInput | Prisma.ClassroomScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Classroom"> | string
  cohortId?: Prisma.UuidNullableWithAggregatesFilter<"Classroom"> | string | null
  name?: Prisma.StringWithAggregatesFilter<"Classroom"> | string
  capacity?: Prisma.IntNullableWithAggregatesFilter<"Classroom"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Classroom"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Classroom"> | Date | string
}

export type ClassroomCreateInput = {
  id?: string
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  cohort?: Prisma.CohortCreateNestedOneWithoutClassroomsInput
}

export type ClassroomUncheckedCreateInput = {
  id?: string
  cohortId?: string | null
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClassroomUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cohort?: Prisma.CohortUpdateOneWithoutClassroomsNestedInput
}

export type ClassroomUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cohortId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClassroomCreateManyInput = {
  id?: string
  cohortId?: string | null
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClassroomUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClassroomUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cohortId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClassroomListRelationFilter = {
  every?: Prisma.ClassroomWhereInput
  some?: Prisma.ClassroomWhereInput
  none?: Prisma.ClassroomWhereInput
}

export type ClassroomOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ClassroomCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cohortId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClassroomAvgOrderByAggregateInput = {
  capacity?: Prisma.SortOrder
}

export type ClassroomMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cohortId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClassroomMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cohortId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClassroomSumOrderByAggregateInput = {
  capacity?: Prisma.SortOrder
}

export type ClassroomCreateNestedManyWithoutCohortInput = {
  create?: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput> | Prisma.ClassroomCreateWithoutCohortInput[] | Prisma.ClassroomUncheckedCreateWithoutCohortInput[]
  connectOrCreate?: Prisma.ClassroomCreateOrConnectWithoutCohortInput | Prisma.ClassroomCreateOrConnectWithoutCohortInput[]
  createMany?: Prisma.ClassroomCreateManyCohortInputEnvelope
  connect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
}

export type ClassroomUncheckedCreateNestedManyWithoutCohortInput = {
  create?: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput> | Prisma.ClassroomCreateWithoutCohortInput[] | Prisma.ClassroomUncheckedCreateWithoutCohortInput[]
  connectOrCreate?: Prisma.ClassroomCreateOrConnectWithoutCohortInput | Prisma.ClassroomCreateOrConnectWithoutCohortInput[]
  createMany?: Prisma.ClassroomCreateManyCohortInputEnvelope
  connect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
}

export type ClassroomUpdateManyWithoutCohortNestedInput = {
  create?: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput> | Prisma.ClassroomCreateWithoutCohortInput[] | Prisma.ClassroomUncheckedCreateWithoutCohortInput[]
  connectOrCreate?: Prisma.ClassroomCreateOrConnectWithoutCohortInput | Prisma.ClassroomCreateOrConnectWithoutCohortInput[]
  upsert?: Prisma.ClassroomUpsertWithWhereUniqueWithoutCohortInput | Prisma.ClassroomUpsertWithWhereUniqueWithoutCohortInput[]
  createMany?: Prisma.ClassroomCreateManyCohortInputEnvelope
  set?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  disconnect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  delete?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  connect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  update?: Prisma.ClassroomUpdateWithWhereUniqueWithoutCohortInput | Prisma.ClassroomUpdateWithWhereUniqueWithoutCohortInput[]
  updateMany?: Prisma.ClassroomUpdateManyWithWhereWithoutCohortInput | Prisma.ClassroomUpdateManyWithWhereWithoutCohortInput[]
  deleteMany?: Prisma.ClassroomScalarWhereInput | Prisma.ClassroomScalarWhereInput[]
}

export type ClassroomUncheckedUpdateManyWithoutCohortNestedInput = {
  create?: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput> | Prisma.ClassroomCreateWithoutCohortInput[] | Prisma.ClassroomUncheckedCreateWithoutCohortInput[]
  connectOrCreate?: Prisma.ClassroomCreateOrConnectWithoutCohortInput | Prisma.ClassroomCreateOrConnectWithoutCohortInput[]
  upsert?: Prisma.ClassroomUpsertWithWhereUniqueWithoutCohortInput | Prisma.ClassroomUpsertWithWhereUniqueWithoutCohortInput[]
  createMany?: Prisma.ClassroomCreateManyCohortInputEnvelope
  set?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  disconnect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  delete?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  connect?: Prisma.ClassroomWhereUniqueInput | Prisma.ClassroomWhereUniqueInput[]
  update?: Prisma.ClassroomUpdateWithWhereUniqueWithoutCohortInput | Prisma.ClassroomUpdateWithWhereUniqueWithoutCohortInput[]
  updateMany?: Prisma.ClassroomUpdateManyWithWhereWithoutCohortInput | Prisma.ClassroomUpdateManyWithWhereWithoutCohortInput[]
  deleteMany?: Prisma.ClassroomScalarWhereInput | Prisma.ClassroomScalarWhereInput[]
}

export type ClassroomCreateWithoutCohortInput = {
  id?: string
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClassroomUncheckedCreateWithoutCohortInput = {
  id?: string
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClassroomCreateOrConnectWithoutCohortInput = {
  where: Prisma.ClassroomWhereUniqueInput
  create: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput>
}

export type ClassroomCreateManyCohortInputEnvelope = {
  data: Prisma.ClassroomCreateManyCohortInput | Prisma.ClassroomCreateManyCohortInput[]
  skipDuplicates?: boolean
}

export type ClassroomUpsertWithWhereUniqueWithoutCohortInput = {
  where: Prisma.ClassroomWhereUniqueInput
  update: Prisma.XOR<Prisma.ClassroomUpdateWithoutCohortInput, Prisma.ClassroomUncheckedUpdateWithoutCohortInput>
  create: Prisma.XOR<Prisma.ClassroomCreateWithoutCohortInput, Prisma.ClassroomUncheckedCreateWithoutCohortInput>
}

export type ClassroomUpdateWithWhereUniqueWithoutCohortInput = {
  where: Prisma.ClassroomWhereUniqueInput
  data: Prisma.XOR<Prisma.ClassroomUpdateWithoutCohortInput, Prisma.ClassroomUncheckedUpdateWithoutCohortInput>
}

export type ClassroomUpdateManyWithWhereWithoutCohortInput = {
  where: Prisma.ClassroomScalarWhereInput
  data: Prisma.XOR<Prisma.ClassroomUpdateManyMutationInput, Prisma.ClassroomUncheckedUpdateManyWithoutCohortInput>
}

export type ClassroomScalarWhereInput = {
  AND?: Prisma.ClassroomScalarWhereInput | Prisma.ClassroomScalarWhereInput[]
  OR?: Prisma.ClassroomScalarWhereInput[]
  NOT?: Prisma.ClassroomScalarWhereInput | Prisma.ClassroomScalarWhereInput[]
  id?: Prisma.UuidFilter<"Classroom"> | string
  cohortId?: Prisma.UuidNullableFilter<"Classroom"> | string | null
  name?: Prisma.StringFilter<"Classroom"> | string
  capacity?: Prisma.IntNullableFilter<"Classroom"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Classroom"> | Date | string
}

export type ClassroomCreateManyCohortInput = {
  id?: string
  name: string
  capacity?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClassroomUpdateWithoutCohortInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClassroomUncheckedUpdateWithoutCohortInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClassroomUncheckedUpdateManyWithoutCohortInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  capacity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ClassroomSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cohortId?: boolean
  name?: boolean
  capacity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}, ExtArgs["result"]["classroom"]>

export type ClassroomSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cohortId?: boolean
  name?: boolean
  capacity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}, ExtArgs["result"]["classroom"]>

export type ClassroomSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cohortId?: boolean
  name?: boolean
  capacity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}, ExtArgs["result"]["classroom"]>

export type ClassroomSelectScalar = {
  id?: boolean
  cohortId?: boolean
  name?: boolean
  capacity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ClassroomOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cohortId" | "name" | "capacity" | "createdAt" | "updatedAt", ExtArgs["result"]["classroom"]>
export type ClassroomInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}
export type ClassroomIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}
export type ClassroomIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cohort?: boolean | Prisma.Classroom$cohortArgs<ExtArgs>
}

export type $ClassroomPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Classroom"
  objects: {
    cohort: Prisma.$CohortPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    cohortId: string | null
    name: string
    capacity: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["classroom"]>
  composites: {}
}

export type ClassroomGetPayload<S extends boolean | null | undefined | ClassroomDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClassroomPayload, S>

export type ClassroomCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClassroomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ClassroomCountAggregateInputType | true
  }

export interface ClassroomDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Classroom'], meta: { name: 'Classroom' } }
  /**
   * Find zero or one Classroom that matches the filter.
   * @param {ClassroomFindUniqueArgs} args - Arguments to find a Classroom
   * @example
   * // Get one Classroom
   * const classroom = await prisma.classroom.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClassroomFindUniqueArgs>(args: Prisma.SelectSubset<T, ClassroomFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Classroom that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClassroomFindUniqueOrThrowArgs} args - Arguments to find a Classroom
   * @example
   * // Get one Classroom
   * const classroom = await prisma.classroom.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClassroomFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClassroomFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Classroom that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomFindFirstArgs} args - Arguments to find a Classroom
   * @example
   * // Get one Classroom
   * const classroom = await prisma.classroom.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClassroomFindFirstArgs>(args?: Prisma.SelectSubset<T, ClassroomFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Classroom that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomFindFirstOrThrowArgs} args - Arguments to find a Classroom
   * @example
   * // Get one Classroom
   * const classroom = await prisma.classroom.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClassroomFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClassroomFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Classrooms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Classrooms
   * const classrooms = await prisma.classroom.findMany()
   * 
   * // Get first 10 Classrooms
   * const classrooms = await prisma.classroom.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const classroomWithIdOnly = await prisma.classroom.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClassroomFindManyArgs>(args?: Prisma.SelectSubset<T, ClassroomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Classroom.
   * @param {ClassroomCreateArgs} args - Arguments to create a Classroom.
   * @example
   * // Create one Classroom
   * const Classroom = await prisma.classroom.create({
   *   data: {
   *     // ... data to create a Classroom
   *   }
   * })
   * 
   */
  create<T extends ClassroomCreateArgs>(args: Prisma.SelectSubset<T, ClassroomCreateArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Classrooms.
   * @param {ClassroomCreateManyArgs} args - Arguments to create many Classrooms.
   * @example
   * // Create many Classrooms
   * const classroom = await prisma.classroom.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClassroomCreateManyArgs>(args?: Prisma.SelectSubset<T, ClassroomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Classrooms and returns the data saved in the database.
   * @param {ClassroomCreateManyAndReturnArgs} args - Arguments to create many Classrooms.
   * @example
   * // Create many Classrooms
   * const classroom = await prisma.classroom.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Classrooms and only return the `id`
   * const classroomWithIdOnly = await prisma.classroom.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClassroomCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClassroomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Classroom.
   * @param {ClassroomDeleteArgs} args - Arguments to delete one Classroom.
   * @example
   * // Delete one Classroom
   * const Classroom = await prisma.classroom.delete({
   *   where: {
   *     // ... filter to delete one Classroom
   *   }
   * })
   * 
   */
  delete<T extends ClassroomDeleteArgs>(args: Prisma.SelectSubset<T, ClassroomDeleteArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Classroom.
   * @param {ClassroomUpdateArgs} args - Arguments to update one Classroom.
   * @example
   * // Update one Classroom
   * const classroom = await prisma.classroom.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClassroomUpdateArgs>(args: Prisma.SelectSubset<T, ClassroomUpdateArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Classrooms.
   * @param {ClassroomDeleteManyArgs} args - Arguments to filter Classrooms to delete.
   * @example
   * // Delete a few Classrooms
   * const { count } = await prisma.classroom.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClassroomDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClassroomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Classrooms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Classrooms
   * const classroom = await prisma.classroom.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClassroomUpdateManyArgs>(args: Prisma.SelectSubset<T, ClassroomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Classrooms and returns the data updated in the database.
   * @param {ClassroomUpdateManyAndReturnArgs} args - Arguments to update many Classrooms.
   * @example
   * // Update many Classrooms
   * const classroom = await prisma.classroom.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Classrooms and only return the `id`
   * const classroomWithIdOnly = await prisma.classroom.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClassroomUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClassroomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Classroom.
   * @param {ClassroomUpsertArgs} args - Arguments to update or create a Classroom.
   * @example
   * // Update or create a Classroom
   * const classroom = await prisma.classroom.upsert({
   *   create: {
   *     // ... data to create a Classroom
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Classroom we want to update
   *   }
   * })
   */
  upsert<T extends ClassroomUpsertArgs>(args: Prisma.SelectSubset<T, ClassroomUpsertArgs<ExtArgs>>): Prisma.Prisma__ClassroomClient<runtime.Types.Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Classrooms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomCountArgs} args - Arguments to filter Classrooms to count.
   * @example
   * // Count the number of Classrooms
   * const count = await prisma.classroom.count({
   *   where: {
   *     // ... the filter for the Classrooms we want to count
   *   }
   * })
  **/
  count<T extends ClassroomCountArgs>(
    args?: Prisma.Subset<T, ClassroomCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClassroomCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Classroom.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClassroomAggregateArgs>(args: Prisma.Subset<T, ClassroomAggregateArgs>): Prisma.PrismaPromise<GetClassroomAggregateType<T>>

  /**
   * Group by Classroom.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClassroomGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClassroomGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClassroomGroupByArgs['orderBy'] }
      : { orderBy?: ClassroomGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClassroomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Classroom model
 */
readonly fields: ClassroomFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Classroom.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClassroomClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  cohort<T extends Prisma.Classroom$cohortArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Classroom$cohortArgs<ExtArgs>>): Prisma.Prisma__CohortClient<runtime.Types.Result.GetResult<Prisma.$CohortPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Classroom model
 */
export interface ClassroomFieldRefs {
  readonly id: Prisma.FieldRef<"Classroom", 'String'>
  readonly cohortId: Prisma.FieldRef<"Classroom", 'String'>
  readonly name: Prisma.FieldRef<"Classroom", 'String'>
  readonly capacity: Prisma.FieldRef<"Classroom", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Classroom", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Classroom", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Classroom findUnique
 */
export type ClassroomFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter, which Classroom to fetch.
   */
  where: Prisma.ClassroomWhereUniqueInput
}

/**
 * Classroom findUniqueOrThrow
 */
export type ClassroomFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter, which Classroom to fetch.
   */
  where: Prisma.ClassroomWhereUniqueInput
}

/**
 * Classroom findFirst
 */
export type ClassroomFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter, which Classroom to fetch.
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Classrooms to fetch.
   */
  orderBy?: Prisma.ClassroomOrderByWithRelationInput | Prisma.ClassroomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Classrooms.
   */
  cursor?: Prisma.ClassroomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Classrooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Classrooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Classrooms.
   */
  distinct?: Prisma.ClassroomScalarFieldEnum | Prisma.ClassroomScalarFieldEnum[]
}

/**
 * Classroom findFirstOrThrow
 */
export type ClassroomFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter, which Classroom to fetch.
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Classrooms to fetch.
   */
  orderBy?: Prisma.ClassroomOrderByWithRelationInput | Prisma.ClassroomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Classrooms.
   */
  cursor?: Prisma.ClassroomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Classrooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Classrooms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Classrooms.
   */
  distinct?: Prisma.ClassroomScalarFieldEnum | Prisma.ClassroomScalarFieldEnum[]
}

/**
 * Classroom findMany
 */
export type ClassroomFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter, which Classrooms to fetch.
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Classrooms to fetch.
   */
  orderBy?: Prisma.ClassroomOrderByWithRelationInput | Prisma.ClassroomOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Classrooms.
   */
  cursor?: Prisma.ClassroomWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Classrooms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Classrooms.
   */
  skip?: number
  distinct?: Prisma.ClassroomScalarFieldEnum | Prisma.ClassroomScalarFieldEnum[]
}

/**
 * Classroom create
 */
export type ClassroomCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * The data needed to create a Classroom.
   */
  data: Prisma.XOR<Prisma.ClassroomCreateInput, Prisma.ClassroomUncheckedCreateInput>
}

/**
 * Classroom createMany
 */
export type ClassroomCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Classrooms.
   */
  data: Prisma.ClassroomCreateManyInput | Prisma.ClassroomCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Classroom createManyAndReturn
 */
export type ClassroomCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * The data used to create many Classrooms.
   */
  data: Prisma.ClassroomCreateManyInput | Prisma.ClassroomCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Classroom update
 */
export type ClassroomUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * The data needed to update a Classroom.
   */
  data: Prisma.XOR<Prisma.ClassroomUpdateInput, Prisma.ClassroomUncheckedUpdateInput>
  /**
   * Choose, which Classroom to update.
   */
  where: Prisma.ClassroomWhereUniqueInput
}

/**
 * Classroom updateMany
 */
export type ClassroomUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Classrooms.
   */
  data: Prisma.XOR<Prisma.ClassroomUpdateManyMutationInput, Prisma.ClassroomUncheckedUpdateManyInput>
  /**
   * Filter which Classrooms to update
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * Limit how many Classrooms to update.
   */
  limit?: number
}

/**
 * Classroom updateManyAndReturn
 */
export type ClassroomUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * The data used to update Classrooms.
   */
  data: Prisma.XOR<Prisma.ClassroomUpdateManyMutationInput, Prisma.ClassroomUncheckedUpdateManyInput>
  /**
   * Filter which Classrooms to update
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * Limit how many Classrooms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Classroom upsert
 */
export type ClassroomUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * The filter to search for the Classroom to update in case it exists.
   */
  where: Prisma.ClassroomWhereUniqueInput
  /**
   * In case the Classroom found by the `where` argument doesn't exist, create a new Classroom with this data.
   */
  create: Prisma.XOR<Prisma.ClassroomCreateInput, Prisma.ClassroomUncheckedCreateInput>
  /**
   * In case the Classroom was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClassroomUpdateInput, Prisma.ClassroomUncheckedUpdateInput>
}

/**
 * Classroom delete
 */
export type ClassroomDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
  /**
   * Filter which Classroom to delete.
   */
  where: Prisma.ClassroomWhereUniqueInput
}

/**
 * Classroom deleteMany
 */
export type ClassroomDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Classrooms to delete
   */
  where?: Prisma.ClassroomWhereInput
  /**
   * Limit how many Classrooms to delete.
   */
  limit?: number
}

/**
 * Classroom.cohort
 */
export type Classroom$cohortArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cohort
   */
  select?: Prisma.CohortSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cohort
   */
  omit?: Prisma.CohortOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CohortInclude<ExtArgs> | null
  where?: Prisma.CohortWhereInput
}

/**
 * Classroom without action
 */
export type ClassroomDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classroom
   */
  select?: Prisma.ClassroomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classroom
   */
  omit?: Prisma.ClassroomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassroomInclude<ExtArgs> | null
}
