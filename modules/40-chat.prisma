
model Conversation {
  id               String           @id @default(uuid())
  instituteId      String?
  type             ConversationType @default(DIRECT)
  title            String?
  isPrivate        Boolean          @default(true)
  createdByUserId  String?
  createdByAdminId String?
  metadata         Json?
  lastMessageId    String?
  lastMessageAt    DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
 
  notification Notification[]

  institute      Institute?                @relation(fields: [instituteId], references: [id])
  createdByUser  User?                     @relation("ConversationCreatedByUser", fields: [createdByUserId], references: [id])
  createdByAdmin Admin?                    @relation("ConversationCreatedByAdmin", fields: [createdByAdminId], references: [id])
  participants   ConversationParticipant[]
  messages       Message[]

  @@index([instituteId])
  @@index([createdByUserId])
  @@index([createdByAdminId])
}

model ConversationParticipant {
  id             String    @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime  @default(now())
  role           String? // e.g. MEMBER, MODERATOR
  mutedUntil     DateTime?
  canWrite       Boolean   @default(true)
  canViewHistory Boolean   @default(true)

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderUserId   String?
  senderAdminId  String?
  content        String?
  attachments    String[] // list of urls/keys
  system         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation         @relation(fields: [conversationId], references: [id])
  senderUser   User?                @relation("MessageSender", fields: [senderUserId], references: [id])
  senderAdmin  Admin?               @relation("MessageSenderAdmin", fields: [senderAdminId], references: [id])
  readReceipts MessageReadReceipt[] @relation("MessageReadReceiptMessage")

  @@index([conversationId, createdAt])
  @@index([senderUserId])
  @@index([senderAdminId])
}

model MessageReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation("MessageReadReceiptMessage", fields: [messageId], references: [id])
  user    User    @relation("MessageReadReceiptUser", fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
}

model ParentChild {
  id        String   @id @default(uuid())
  parentId  String
  childId   String
  relation  String? // e.g. father, mother, guardian
  createdAt DateTime @default(now())

  parent User @relation("ParentChildren", fields: [parentId], references: [id])
  child  User @relation("ChildParents", fields: [childId], references: [id])

  @@unique([parentId, childId])
  @@index([childId])
  @@index([parentId])
}

model Notification {
  id             String   @id @default(uuid())
  userId         String?
  adminId        String?
  instituteId    String?
  conversationId String?
  title          String
  body           String
  read           Boolean  @default(false)
  meta           Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  user         User?         @relation("NotificationUser", fields: [userId], references: [id])
  admin        Admin?        @relation("NotificationAdmin", fields: [adminId], references: [id])
  institute    Institute?    @relation(fields: [instituteId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([userId, instituteId])
}
